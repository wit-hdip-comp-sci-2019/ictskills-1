{"type":"lab","chapters":[{"title":"# Objectives","shortTitle":"Lab-4 Playlist 1","contentMd":"# Objectives\n\nImport and run a new starter project. Extend this project to include multiple 'views'. Explore the handlebars templating library.\n\n"},{"title":"# Template 1","shortTitle":"01","contentMd":"# Template 1\n\nCreate a new project in Glitch - instead of selecting a project template, press the 'Clone from Git Repo' button:\n\n![](img/01x.png)\n\nIn the subsequent dialog, enter this repo url:\n\n~~~bash\nhttps://github.com/wit-hdip-comp-sci-2019/glitch-template-1\n~~~\n\n![](img/02x.png)\n\nPress ok to import the project.\n\n![](img/05x.png)\n\nOccasionally, the import process will stall, and the above perspective will not appear correctly. If this happens, the simplest option is to:\n\n- Delete the current (partially imported project) \n\n![](img/07x.png)\n\n- Select 'Back to Glitch':\n\n![](img/08x.png)\n\nAnd then proceed to clone from github again as above. The anomaly that caused the stall will usually not occur twice in a row.\n\nNow, select Tools->Logs (a button along the end of the screen), and turn on logs:\n\n![](img/03x.png)\n\nNow press the 'Show' button - which should reveal the application running:\n\n![](img/04x.png)\n\nExplore the (small) number of views.\n\nNow examine all of the sources files. There will be errors reported in 2 files:\n\n- views/about.hbs\n- views/dashboard.hbs\n\n![](img/21.png)\n\nIgnore these particular errors for the moment. They are related to an over zealous code formatter, which we haven't figured out how to disable yet.\n"},{"title":"# Playlist","shortTitle":"02","contentMd":"# Playlist\n\nWe are going to evolve this project into a simple playlist appication, enabling a user to create a playlist of songs. In this step, we will layout a static version.\n\nFirst, we can make some simple changes to re brand the app as `Playlist 1` instead of `Template 1`\n\nFirst replace the existing corresponding lines of code with each of the following in the views:\n\n## views/partials/menu.hbs\n\n~~~html\n...\n  <header class=\"ui header item\"> Playlist 1 </header>\n...\n~~~\n\n## views/about.hbs\n\n~~~html\n...\n  <h3>\n    Playlist 1\n  </h3>\n  <p>\n    A Little Playlist Maker - Version 1\n  </p>\n...\n~~~\n\nNow the controllers - adjust the viewData objects as shown:\n\n## controllers/about.js\n\n~~~javascript\n...\n    const viewData = {\n      title: 'About Playlist 1'\n    };\n...\n~~~\n\n## controllers/dashboard.js\n\n~~~javascript\n...\n    const viewData = {\n      title: 'Playlist 1 Dashboard'\n    };\n...\n~~~\n\nMake sure the app is still running, but with the new branding. If there are errors, turn the logs and you may be able to see the source of the problem - which will usually be some small error in the javascript sources.\n"},{"title":"# Static Playlist","shortTitle":"03","contentMd":"# Static Playlist\n\nIn this step we will start to display the playlist itself. First, create a new partial called `listsongs.hbs`:\n\n## views/partials/listsongs.hbs\n\n~~~html\n<table class=\"ui table\">\n  <thead>\n    <tr>\n      <th>Song</th>\n      <th>Artist</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n      </td>\n      <td>\n      </td>\n    </tr>\n  </tbody>\n</table>\n~~~\n\nMake sure you include the folder name in the full file name when creating this file:\n\n![](img/10x.png)\n\n![](img/11.png)\n\nThen press 'Add File'. The file can be edited now - paste the listsongs.hbs template source in  now.\n\n![](img/11x.png)\n\nReplace the contents of dashboard.hbs with the following:\n\n## views/dashboard.hbs\n\n~~~html\n{{> menu id=\"dashboard\"}}\n\n<section class=\"ui segment\">\n  <h2 class=\"ui header\">\n    Playlist Title\n  </h2>\n  {{> listsongs}}\n</section>\n~~~\n\nMake sure the app runs successfully - the dashboard should look like this:\n\n![](img/22.png)\n\nTo test out the UX, we might include some actual songs (replace the tbody with the following):\n\n## views/partials/listsongs.hbs\n\n~~~html\n<tbody>\n  <tr>\n    <td>\n      Piano Sonata No. 3\n    </td>\n    <td>\n      Beethoven\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Piano Sonata No. 7\n    </td>\n    <td>\n      Beethoven\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Piano Sonata No. 10\n    </td>\n    <td>\n      Beethoven\n    </td>\n  </tr>\n</tbody>\n~~~\n\n... and also give the playlist a title:\n\n## views/dashboard.hbs\n\n~~~html\n....\n  <h2 class=\"ui header\">\n    Beethoven Sonatas\n  </h2>\n...\n~~~\n\nThe dashboard should look like this:\n\n![](img/23.png)\n\nExercise the UX fully again. Keep an eye on the logs\n\n![](img/24.png)\n\nLocate where in the controllers these messages are being generated:\n\n~~~js\n...\n    logger.info('start rendering');\n...\n~~~\n\nThese logging messages are a useful technique for figuring out what might be going wrong with an app. There are three variants of the logging statement: `info`, `error` and `debug`. Experiment now with some of these, and exercise the app to make sure the log messages appear.\n\n~~~js\n...\n    logger.error('some error has occurred');\n...\n~~~\n\n~~~js\n...\n    logger.debug('some step has occurred...');\n...\n~~~\n\nError and debug messages may appear in red. You might need to open the `source` and `run` views of the app in side by side windows to get a clearer view of the logs.\n"},{"title":"# Dynamic Playlist","shortTitle":"04","contentMd":"# Dynamic Playlist\n\nThe app as we have it now could have been completely built as a static web site. However, the framework and tools we have used in this version enable us to evolve this static site into an interactive web app.\n\nThe first step is to eliminate some of the static content from the listsongs partial. In  listsongs.hbs replace the table with the following):\n\n## views/partials/listsongs.hbs\n\n~~~html\n<table class=\"ui table\">\n  <thead>\n    <tr>\n      <th>Song</th>\n      <th>Artist</th>\n    </tr>\n  </thead>\n  <tbody>\n    {{#each playlist.songs}}\n      <tr>\n        <td>\n          {{title}}\n        </td>\n        <td>\n          {{artist}}\n        </td>\n      </tr>\n    {{/each}}\n  </tbody>\n</table>\n~~~\n\nIn the above, we are `iterating` over an `array` of `songs` inside a `playlist` object:\n\n~~~html\n{{#each playlist.songs}}\n  <tr>\n    <td>\n      {{title}}\n    </td>\n    <td>\n      {{artist}}\n    </td>\n  </tr>\n{{/each}}\n~~~\n\nThis playlist object must be passed to the view for this to work.\n\nIn the `dashboard.js` controller, we can define a playlist object in Javascript (place this definition prior to the dashboard object definition):\n\n## controllers/dashboard.js\n\n~~~js\n...\nconst sonatas = {\n  title: 'Sonatas',\n  songs: [\n    {\n      title: 'Piano Sonata No. 3',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Sonata No. 7',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Sonata No. 10',\n      artist: 'Beethoven',\n    },\n  ],\n};\n\n...\n~~~\n\nExamine the above structure carefully. This is a javascript `object literal`. It consists of :\n\n- a title field containing the string `Sonatas`\n- an array called `songs`, which contains 3 objects, each of which has:\n    - title\n    - artist\n\nThe index method in dashboard.js file can now be modified to pass this list to the view:\n\n## controllers/dashboard.js\n\n~~~js\n  index(request, response) {\n    logger.info(\"dashboard rendering\");\n     const viewData = {\n       title: 'Playlist 1 Dashboard',\n       playlist: sonatas\n    };\n    response.render(\"dashboard\", viewData);\n  }\n~~~\n\nMake sure the playlist is displayed, showing the contents of the sonatas array:\n\n![](img/25.png)\n\nThis is the complete dashboard module at this stage:\n\n## controllers/dashboard.js\n\n~~~\n\"use strict\";\n\nconst logger = require(\"../utils/logger\");\n\nconst sonatas = {\n  title: 'Sonatas',\n  songs: [\n    {\n      title: 'Piano Sonata No. 3',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Sonata No. 7',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Sonata No. 10',\n      artist: 'Beethoven',\n    },\n  ],\n};\n\nconst dashboard = {\n  index(request, response) {\n    logger.info(\"dashboard rendering\");\n     const viewData = {\n       title: 'Playlist 1 Dashboard',\n       playlist: sonatas\n    };\n    response.render(\"dashboard\", viewData);\n  }\n};\n\nmodule.exports = dashboard;\n~~~\n\n## Logs\n\nWe can take advantage of the logger to display the playlist before we render it:\n\n~~~js\nindex(request, response) {\n  logger.info('dashboard rendering');\n  const viewData = {\n    title: 'Playlist Dashboard',\n    playlist: sonatas,\n  };\n  logger.info('about to render', sonatas);\n  response.render('dashboard', viewData);\n},\n~~~\n\nYou should see something like this in the logs:\n\n![](img/26.png)\n"},{"title":"# playlist-store","shortTitle":"05","contentMd":"# playlist-store\n\nWe would like to manage the playlists separately from the controller, so that we can eventually introduce multiple playlists.\n\nTo prepare for this, create a new javascript module your app. Call it `playlist-store.js` in a new `models` folder. In Glitch, you can enter a full path, including a new directory when adding a file:\n\n![](img/14.png)\n\n![](img/15.png)\n\n## models/playlist-store.js\n\n~~~js\n'use strict';\n\nconst logger = require('../utils/logger');\n\nconst sonatas = {\n  title: 'Beethoven Sonatas',\n  songs: [\n    {\n      title: 'Piano Sonata No. 3',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Sonata No. 7',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Sonata No. 10',\n      artist: 'Beethoven',\n    },\n  ],\n};\n\nmodule.exports = sonatas;\n~~~\n\nDashboard can then be simplified:\n\n## controllers/dashboard.js\n\n~~~js\n'use strict';\n\nconst logger = require('../utils/logger');\nconst sonatas = require('../models/playlist-store.js');\n\nconst dashboard = {\n  index(request, response) {\n    logger.info('dashboard rendering');\n    const viewData = {\n      title: 'Playlist Dashboard',\n      playlist: sonatas,\n    };\n    logger.info('about to render', sonatas);\n    response.render('dashboard', viewData);\n  },\n};\n\nmodule.exports = dashboard;\n~~~\n\nNotice in the above that we are importing the sonatas from the playlist-store module. Otherwise, the dashboard is unchanged.\n"},{"title":"# Multiple playlists","shortTitle":"06","contentMd":"# Multiple playlists\n\nHere is a new version of `playlist-store.js`:\n\n## models/playlist-store.js\n\n~~~\n'use strict';\n\nconst logger = require('../utils/logger');\n\nconst sonatas = {\n  title: 'Beethoven Sonatas',\n  songs: [\n    {\n      title: 'Piano Sonata No. 3',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Sonata No. 7',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Sonata No. 10',\n      artist: 'Beethoven',\n    },\n  ],\n};\n\nconst concertos = {\n  title: 'Beethoven Concertos',\n  songs: [\n    {\n      title: 'Piano Concerto No. 0',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Concerto  No. 4',\n      artist: 'Beethoven',\n    },\n    {\n      title: 'Piano Concerto  No. 6',\n      artist: 'Beethoven',\n    },\n  ],\n};\n\nconst playlistCollection = [sonatas, concertos];\n\nmodule.exports = playlistCollection;\n~~~\n\nHere we are defining 2 playlists :\n\n- sonatas\n- concertos\n\n... and then an array called `playlistCollection`, which contains these two:\n\n~~~js\nconst playlistCollection = [sonatas, concertos];\n~~~\n\nThis is the object that is then exported:\n\n~~~js\nmodule.exports = playlistCollection;\n~~~\n\nIn a revised dashboard, we import this object, and pass it to the view:\n\n## controllers/dashboard.js\n\n~~~\n'use strict';\n\nconst logger = require('../utils/logger');\nconst playlistCollection = require('../models/playlist-store.js');\n\nconst dashboard = {\n  index(request, response) {\n    logger.info('dashboard rendering');\n    const viewData = {\n      title: 'Playlist Dashboard',\n      playlists: playlistCollection,\n    };\n    logger.info('about to render', playlistCollection);\n    response.render('dashboard', viewData);\n  },\n};\n\nmodule.exports = dashboard;\n~~~\n\nThe dashboard view will have to be rewritten to now display a collection of playlists (we no longer use the listsongs.hbs partial in the dashboard.hbs):\n\n## views/dashboard.hbs\n\n~~~html\n{{> menu id=\"dashboard\"}}\n\n{{#each playlists}}\n  <section class=\"ui segment\">\n    <h2 class=\"ui header\">\n      {{title}}\n    </h2>\n    <table class=\"ui table\">\n      <thead>\n        <tr>\n          <th>Song</th>\n          <th>Artist</th>\n        </tr>\n      </thead>\n      <tbody>\n        {{#each songs}}\n          <tr>\n            <td>\n              {{title}}\n            </td>\n            <td>\n              {{artist}}\n            </td>\n          </tr>\n        {{/each}}\n      </tbody>\n    </table>\n  </section>\n{{/each}}\n~~~\n\nTry this now, making sure you are seeing the two playlists on the dashboard:\n\n![](img/09.png)\n\nLook carefully at `views/dashboard.hbs`, see if you can relate the template to the playlist data structure being passed to to it. Notice that it is performing a nested loop:\n\n- iterating over the playlist array\n\n~~~html\n...\n{{#each playlists}}\n  ...\n{{/each}}\n~~~\n\n- then iterating over each song in a given playlist.\n\n~~~html\n...\n{{#each playlists}}\n  ...\n  {{#each songs}}\n    ...\n  {{/each}}\n  ..\n{{/each}}\n~~~\n\nNotice that `title` means something slightly different in each context\n\n- the title of the playlist\nOR\n- the title of a song\n"},{"title":"# Introducing JSON","shortTitle":"07","contentMd":"# Introducing JSON\n\nIn javascript, it can sometimes be very convenient to use a notation to represent a data structure, but without any additional javascript constructs. Javascript Object Notation (JSON) is designed for this purpose. Here is a new file to represent our playlists in JSON format, create it in your app now:\n\n## models/playlist-store.json\n\n~~~js\n{\n  \"playlistCollection\": [\n    {\n      \"title\": \"Beethoven Sonatas\",\n      \"songs\": [\n        {\n          \"title\": \"Piano Sonata No. 3\",\n          \"artist\": \"Beethoven\"\n        },\n        {\n          \"title\": \"Piano Sonata No. 7\",\n          \"artist\": \"Beethoven\"\n        },\n        {\n          \"title\": \"Piano Sonata No. 10\",\n          \"artist\": \"Beethoven\"\n        }\n      ]\n    },\n    {\n      \"title\": \"Beethoven Concertos\",\n      \"songs\": [\n        {\n          \"title\": \"Piano Concerto No. 0\",\n          \"artist\": \"Beethoven\"\n        },\n        {\n          \"title\": \"Piano Concerto No. 4\",\n          \"artist\": \"Beethoven\"\n        },\n        {\n          \"title\": \"Piano Concerto No. 6\",\n          \"artist\": \"Beethoven\"\n        }\n      ]\n    }\n  ]\n}\n~~~\n\nWe consider this to be a data file rather than a program. Although it looks superficially like javascript, you cannot put control structures, functions or other constructs in it. Also, the format is very strict, so the use of double quotes and separator commas is very precise. Any deviation will generate an error in any program that attempts to read it.\n\nWe can revise `playlist-store.js` to read this file now:\n\n## models/playlist-store.js\n\n~~~js\n'use strict';\n\nconst playlistCollection = require('./playlist-store.json').playlistCollection;\n\nmodule.exports = playlistCollection;\n~~~\n\nThe program should behave exactly as before.\n"},{"title":"# Exercises & Archives","shortTitle":"Exercises","contentMd":"# Exercises & Archives\n\nIf you want to download a complete version of the app as it should be at the end of this lab, then create a new Glith project by cloning this repo:\n\n- https://github.com/wit-hdip-comp-sci-2019/playlist-1\n\n## Exercise 1: Review the JSON file format\n\nLook again at the playlist as represented in:\n\n- Step 6: Javascript Object Literal\n- Step 7: JSON\n\nReview the differences carefully.\n\n## Exercise 2: Add a new playlist\n\nExtend the JSON file to include an additional playlist - so that three playlists are displayed on the dashboard.\n\n## Exercise 3: Introduce IDs\n\nWhen manipulating data maintained in JSON, or other external format, each object will often require an ID in order to manipulate the information effectively. Introduce an ID for every playlist and every song, now.\n\nFor instance for a playlist:\n\n~~~js\n\"playlistCollection\": [\n   {\n     \"id\": \"01\",\n     \"title\": \"Beethoven Sonatas\",\n     \"songs\": [\n~~~\n\n... and for a song:\n\n~~~\n{\n  \"id\": \"03\",\n  \"title\": \"Piano Sonata No. 3\",\n  \"artist\": \"Beethoven\"\n},\n~~~\n\nPlace unique IDs on all your playlists and songs now. You can use any unique numbers (enclosed in double quotes) for the moment.\n\n## Exercise 4: New Fields\n\nExtend the playlist to have new entry called `duration`. Also, extend each song to also have a `duration` field + a `genre` field.\n\nModify the dashboard view to display these new fields.\n\n## Exercise 4: \n\nExtend the following views:\n\n- Welcome: Extend the welcome view to contain a more detailed outline of the purpose of the application\n- About: Extend the about view to provide contact details (may be fictitious) for the author/company that created the app.\n\n## Exercise 5: Run Locally\n\nDownload the app and run it on your own workstation. Instructions for doing this are in Lab-1, Step 4.\n\n- <https://wit-hdip-comp-sci-2019.github.io/ictskills-1/topic-00-module-overview/unit-1/book-a-glitch-intro/index.html#/04>\n\n\n"}]}