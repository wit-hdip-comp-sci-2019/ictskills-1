


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-2 JS Intro",
  "img" : "img/main.jpg",
  "videoid" : "Hr6jefN0f0c",
  "objectives" : "<p>Background &amp; Tools, Variables &amp; Boolean Logic</p>",
  "folder" : "book-b-js-introduction",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Objectives",
    "shortTitle": "Lab-2 JS Intro",
    "contentMd" : "# Objectives\n\nBackground & Tools, Variables & Boolean Logic\n\n## Background & Tools\n\n- Show messages using `alert` and `console.log`\n- Include a script in an HTML file\n\n## Variables\n\n- Initialize and assign variables in JavaScript\n- Store variables using the `prompt` function\n- Write comments in your JavaScript code\n- List all of the data types in JavaScript\n\n- Distinguish between variables defined using const, let and var \n\n## Boolean Logic\n\n- Write conditional logic using boolean operators\n- List all of the falsey values in JavaScript\n- Use if/else and switch statements to include conditional logic in your JavaScript code\n- Explain the difference between `==` and `===` in JavaScript\n- Convert between data types explicitly in JavaScript\n\n## Objects\n\n- Compare and contrast primitive data types with objects\n- Be able to create an object consisting of multiple primitive types\n- Compose a simple method inside an object.\n\n"
    },
  
    {
    "title": "# Running Javascript",
    "shortTitle": "01",
    "contentMd" : "# Running Javascript\n\n## Option 1: Chrome Developer Console\n\nFor some of the short JavaScript examples, we will be using the Chrome console. To open up the console press `Control + Shift + J` on Windows and Linux (on a Mac `Option + Command + j`) . Another way to get to the console is to right click on the web page, select Inspect, and then move to the tab called `Console`.\n\nInside of this console you can write JavaScript! So let's start by alerting a message. In the Chrome Console, type the following:\n\n~~~\nalert(\"JavaScript is sweet!\");\n~~~\n\nHit enter, and you should see a pop-up window with the message you typed inside of the alert. (Make sure that when you are writing commands in the Chrome console, you always press enter after you type your code; otherwise, the code won't run.) Try it again with a different message.\n\nIf you find those pop-ups annoying, you can also tell JavaScript to log a message directly to the console, using a function called console.log:\n\n~~~\nconsole.log(\"This is less obtrusive.\");\n~~~\n\nOnce again, after you've written the JavaScript, press enter to execute your code. You should see this message logged in the console.\n\nAs you start typing more in the console, you will see it begins to fill up quickly. If you would like to clear the console you can either type in `clear()` and press enter or press the clear icon on the top left. If you would like see learn some more keyboard shortcuts with the chrome console, you can learn more about that [here](https://developers.google.com/web/tools/chrome-devtools/shortcuts?hl=en)\n\n##Option 2: JavaScript and HTML in 2 Separate Files\n\nThe console is great for writing little bits of JavaScript. But if you need to write code that spans multiple lines, it can be a little annoying. You'll need to type shift + enter to get a line break in the console, since just hitting enter executes your code. This isn't too much trouble for code that's a few lines, but writing a lot of JavaScript in this way can quickly get tiring.\n\nAnother option is to keep your HTML and JavaScript in separate files. To do this, you still need to include a script tag in a HTML file, and this tag should link to a separate JavaScript file. Here's how you could do it:firstf\n\n## first.html\n\n~~~\n<!DOCTYPE html>\n<html> \n  <head>\n    <title>JavaScript Test Site</title>\n    <script src=\"first.js\"></script>\n  </head>\n  <body>\n    <p>Nothing going on yet.</p>\n  </body>\n</html>\n~~~\n\nIn this case, we also need a file called `first.js`. So create this file, and inside of it write some JavaScript. Maybe it looks like this:\n\n## first.js\n\n~~~\nalert(\"Coming to you from first.js!\");\n~~~\n\nAs before, the code should execute as soon as you open the HTML page in Chrome.\n\n#Exercises\n\n##Exercise 1. Create the html and javascript files shown in this step.\n\n"
    },
  
    {
    "title": "# Variables",
    "shortTitle": "02",
    "contentMd" : "# Variables\n\n## Fundamentals\n\nWhat's a variable, and why would you ever want to use one? The word \"variable\" may be most familiar to you mathematics classes, when you often use letters like _x_ or _y_ to represent numbers.\n\nThis idea also exists in programming languages. Using variables lets us write code that's easier to read and also easier to change. It's unlikely you'll ever write a significant amount of JavaScript code without using variables, so it's good to get used to them early.\n\nTo see why variables are useful, suppose you want to log a set of greetings to the console:\n\n~~~\nconsole.log(\"Hi, Matt!\");\nconsole.log(\"How are you doing, Matt?\");\nconsole.log(\"See you later, Matt!\");\n~~~\n\nPaste the above into the console in Chrome.\n\n![](img/01x.png)\n\nThis works fine, but what if we want to change the person's name from \"Matt\" to something else? We'll have to change three different spots in our text file, and there's a risk that we'll make a typo when fixing any one of these changes. Wouldn't it be better if we could just store a single copy of the name, and use it wherever we want?\n\nVariables give us this ability. So let's write our first variable. In JavaScript, you can initialize variables using the `var` keyword. Try this:\n\n~~~\nvar firstName = \"Matt\";\nconsole.log(\"Hi, \" + firstName + \"!\");\nconsole.log(\"How are you doing, \" + firstName + \"?\");\nconsole.log(\"See you later, \" + firstName + \"!\");\n~~~\n\nIf you enter this code correctly, you should see the same result as before - JavaScript knows that `firstName` corresponds to the name Matt! \n\n![](img/02x.png)\n\nThere are a few different things going on here, so let's unpack the code a bit. On the first line, we're declaring a variable using the `var` keyword. A variable is just a way for us to save some data in JavaScript. When we typed in `var firstName = \"Matt\"`, JavaScript stored the word `Matt` in the variable `firstName`. From then on, any time you use `firstName` in the console while this window is still open, you'll see the value that `firstName` has stored.\n\nOn the subsequent lines, you'll see there's something else going on too: we're using the `+` operator to combine words made up of characters, or _strings_, together. In JavaScript, when you combine two strings with the `+` operator, you get a new string which is a combination of the two. You can think of this as adding the strings together; a more formal name for it is _concatenation_. For example, if you write the expression `\"Hello\" + \" World\"` in the console, you should see that the result is the single string `\"Hello World\"`.\n\nLet's declare some more variables.\n\n~~~\nvar firstName = \"Matt\";\nvar lastName = \"Lane\";\nvar fullName = firstName + \" \" + lastName;\n~~~\n\nIn all of these examples, we have the keyword `var` in front, followed by the variable name, an assignment operator (the `=` sign), and then the value we want to assign to our variable.\n\nThese examples also illustrate a common convention when writing JavaScript: when declaring variables using multiple words, the standard is to capitalize each word after the first word, and otherwise use lower-case letters (e.g. `firstName`, not `firstname`, `first_name`, `FirstName`, or some other variation). This casing convention is called camel case, and while your JavaScript code will work just fine if you don't abide by this convention, it's good to get in the habit of camel casing your variables.\n\n## The `prompt` function\n\nLet's revisit our earlier example:\n\n~~~\nvar firstName = \"Matt\";\nconsole.log(\"Hi, \" + firstName + \"!\");\nconsole.log(\"How are you doing, \" + firstName + \"?\");\nconsole.log(\"See you later, \" + firstName + \"!\");\n~~~\n\nSince we've used a variable, if we want to change the name, now we only have to do it in one place. That's great! Try changing the value stored in `firstName` from \"Matt\" to your name.\n\nNow suppose we wanted to ask the user for their name. In JavaScript, you can ask the user to provide some information using the `prompt` function. You won't use this function very often (there are better ways to get information from a user), but when you're first learning it's a helpful tool.\n\nWhen you use the `prompt` function, a pop-up window will appear on the page and ask the user to fill in a text box. You can then store what the user types into a variable. Try it out with this modification to our example:\n\n~~~\nvar firstName = prompt(\"What is your first name?\");\n// Now firstName should correspond to whatever the user typed!\nconsole.log(\"Hi, \" + firstName + \"!\");\nconsole.log(\"How are you doing, \" + firstName + \"?\");\nconsole.log(\"See you later, \" + firstName + \"!\");\n~~~\n\nOne last thing. See that line in there that starts with two slashes? That indicates a _comment_. Javascript ignores comments; they are there purely to make notes about the code and generally help with its readability. You can create single-line comments with `//`; if you want a multiline comment, here's a haiku that shows how it's done:\n\n~~~\n/* this is the start of\na multiline comment, and\nthis is the ending. */\n~~~\n\n# Exercises\n\n## Exercise 1: Variables\n\nCreate the following variables using the chrome console:\n\n- `name`, which is a string set to your current name\n- `dayOfBirth`, which is a number set to the day of your birth month\n\nLog these to the console.\n\n"
    },
  
    {
    "title": "# Primitive Data Types ",
    "shortTitle": "03",
    "contentMd" : "# Primitive Data Types \n\nMost of the variables so far stored _strings_. But JavaScript can work with other types of data as well. Let's take a look at the primitive data types.\n\nJavaScript has 6 primitive data types, but we'll only talk about 5 of them. Here's what they look like:\n\n*   string - `var greeting = \"hello\";`\n*   number - `var favoriteNum = 33`;\n*   boolean - `var isAwesome = true;`\n*   undefined - `var foo;` or ` var setToUndefined = undefined;`\n*   null - `var empty = null;`\n\nJavaScript is known as a \"weakly\" typed language. What this means is that when you create variables and assign them to values, you do not have to specify the type of data you are working with. In statically (or strongly) typed languages, like Java and C++, you do need to specify the type.\n\nNow let's look at data types a little more.\n\n## strings\n\nAs we saw above, a string is a set of characters enclosed in quotes. A string can be defined using double quotes:\n\n~~~\nvar greeting = \"Hello Whiskey\";\n~~~\n\nor using single quotes:\n\n~~~\nvar greeeting = 'Hello World';\n~~~\n\nSo what is the difference between the two ways of initializing a string? Well, first of all, if you want quotes in your string, it's nice to have another option to start and end the string:\n\n~~~\nvar phrase = 'Matt said, \"I haven\\'t been to Chile\", the other day.';\n~~~\n\nWhat would happen if you try to use double quotes to create the previous string instead of using single quotes? Try it in your console.\n\nAlso notice that there is a backslash before the single quote in haven't. The backslash is called an escape character and it tells JavaScript that the single quote in the string should not be used to end the string. Try removing the backslash from the string and see what happens in your JavaScript console.\n\nTry declaring the above variables in the chrome, and then log then:\n\n![](img/03x.png)\n\n## number\n\nJavaScript numbers can be positive:\n\n~~~\nvar num = 5;\n~~~\n\nnegative:\n\n~~~\nvar num = -25;\n~~~\n\n## decimal numbers:\n\n~~~\nvar piApproximation = 3.14159265;\n~~~\n\nand we can also do all of the math expressions you'd expect:\n\n~~~\nvar x = 1 + 3;\nvar a = 4.5;\nvar b = 5.9;\nvar c = Math.sqrt(a * a + b * b);\nvar studentTeacherRatio = 4 / 1;\n~~~\n\nIf you need to do any kind of calculation in the application you're building, chances are you'll be relying heavily on the number type.\n\nDeclare and output these variables in the console:\n\n![](img/04x.png)\n\n## boolean\n\nA boolean type can only be in one of two states, true or false. In other words:\n\n~~~\nvar pizzaIsGood = true;\n~~~\n\n~~~\nvar pizzaIsBad = false;\n~~~\n\nBoolean types are a very useful tool for controlling our program. For example, if a user is signed in, you might want to show them a link to update their profile; but if a user is not logged in, you'd probably just want to show them a sign-in link. This sort of behavior, where the code that gets executed is conditioned on something else, happens all the time in programming. We'll learn more about how to deal with these situations in the next chapter.\n\n### undefined\n\nAny variable that is created in JavaScript that is not assigned a value is undefined:\n\n~~~\nvar noValue;  // The value here will be undefined\n~~~\n\nYou can also explicitly set a variable to undefined:\n\n~~~\nvar favoriteFood = \"Candy\";\n// Changed your mind\nvar favoriteFood = undefined;\n~~~\n\n## null\n\nNull is not the same as undefined. It signifies an intentional absense of data.\n\n~~~\nvar secondEmailAddress = null;\n~~~\n\nIt is important to remember that `null` and `undefined` are different types in JavaScript. This can be a confusing feature of JavaScript, even for people who know other programming languages. The distinction can seem somewhat arbitrary when you're first learning the language, but as you get more comfortable the distinction will become clearer. \n\n## Figuring out a variable's type in JavaScript\n\nIn JavaScript, we have a keyword called `typeof` that returns the type of the variable. While this seems pretty fool-proof, there are some quirks that we should be aware of. In the Chrome console, let's type out each one of these:\n\n*   `typeof \"\";` - \"string\"\n*   `typeof 5;` - \"number\"\n*   `typeof false;` - \"boolean\"\n*   `typeof undefined;` - \"undefined\"\n*   `typeof null;` // hmmm, this is not what we expect, it returns \"object\"!\n\n## Converting between types\n\nVery often you'll need to convert a value from one type to another. For example, maybe you want to do some math on a couple of numbers, but you get the numbers from a form and they have a value of string. In some cases JavaScript will change types implicitly, in a process that's often referred to as (implicit) type coercion. We'll discuss the details of this later.\n\nFor now, though, let's take a look at some ways to explicitly change the type of a value. Here are a few examples:\n\n## Converting to a string: `toString`\n\nThe `toString` method will convert any value which is not undefined or null into a string. Here are a couple of examples:\n\n~~~\nvar num = 5;\nvar bool = true;\n\nnum.toString(); // \"5\";\nbool.toString(); // \"true\";\n~~~\n\n## Converting to a number\n\nThere are several ways you can convert a value to a number. One way is to parse the number, using `parseInt` or `parseFloat`: each function will look at a string from left to write and try to make sense of the characters it sees as numbers. Here are some examples:\n\n~~~\nparseInt(\"2\"); // 2\nparseFloat(\"2\"); // 2\nparseInt(\"3.14\"); // 3\nparseFloat(\"3.14\"); // 3.14\nparseInt(\"2.3alkweflakwe\"); // 2\nparseFloat(\"2.3alkweflakwe\"); // 2.3\nparseInt(\"w2.3alkweflakwe\"); // NaN (not a number)\nparseFloat(\"w2.3alkweflakwe\"); // NaN (not a number)\n~~~\n\n\n## Exercise : \n\nIn the `first.js` file created in step 1, to do the following:\n\n- Prompt the user for their favorite color\n- Prompt the user fir their favorire number\n\nLog these values to the console along with a friendly message.\n\nLoad `first.html` in chrome and keep an eye on the console to see that the message is being displayed.\n"
    },
  
    {
    "title": "# Boolean Logic",
    "shortTitle": "04",
    "contentMd" : "# Boolean Logic\n\n### Boolean Logic\n\nAn essential part of writing programs is being able to execute code that depends on certain conditions. There are many different examples when you'd want to conditionally execute code. Here are just a few:\n\n*   You want the navigation bar on your website to look different based on whether or not someone is logged in\n*   If someone enters their password incorrectly, you want to let them know; otherwise, you want to log them in\n*   You're building a tic-tac-toe game, and want to know whether it's X's turn or O's turn\n*   You're building a social network and want to keep person A from seeing person B's profile unless the two of them are friends\n\nIt's very hard to write any kind of interesting software without making use of conditionals and boolean logic. To do so, we'll make use of booleans (`true` and `false`), along with `if` statements and `switch` statements.\n\nAn `if` statement looks something like this:\n\n~~~\nvar instructor = \"Elie\";\n\n// we begin with an \"if\" statement followed by a condition in () and a block of code inside of {}\nif (instructor === \"Elie\") {\n    console.log(\"Yes!\");\n} else {\n    console.log(\"No\");\n}\n~~~\n\nTry this (using copy/paste from above):\n\n![](img/05x.png)\n\nNotice that we used a `===` instead of `=`. Anytime that we use more than one equals operator (we can either use `==` or `===`) we are doing a **comparison** (comparing values). When we use a single equals operator `=`, we are doing what is called **assignment** (setting a variable equal to some value).\n\nThis first example might appear a little strange, because the condition inside of the `if` statement (`instructor === \"Elie\"`) will always return true! Here's another example for you to consider.\n\n Run this code a couple of times and try to get both messages to log to the console based on what you enter into the prompt:\n\n~~~\nvar favoriteFood = prompt(\"What's your favorite food?\");\n\nif(favoriteFood === \"pizza\") {\n    console.log(\"Woah! My favorite food is pizza too!\");\n} else {\n    console.log(\"That's cool. My favorite food is pizza.\");\n}\n~~~\n\nNow, what's the difference between `==` and `===`, you ask? We'll get to that down below. For now, though, it might be helpful to play around with these operators in the Chrome console, and see if you can come up with a guess as to how these operators behave differently.\n\n~~~\nvar number = 55;\n\n// we begin with an \"if\" statement followed by a condition in () and a block of code inside of {}\nif(number == \"55\") {\n    console.log(\"Yes!\");\n} else {\n    console.log(\"No\");\n}\n~~~\n\nPaste the above code into the console - the first time using `==` in the comparison, the second time using `===`. Observe the output carefully.\n\n### Difference between `==` and `===`\n\nIn JavaScript we have two different operators for comparison: the double and triple equals. Both operators check whether the two things being compared have the same value, but there's one important difference. `==` allows for type coercion of the values, while `===` does not. So to understand the difference between these operators, we first need to understand what is meant by type coercion.\n\nConsider the following examples:\n\n~~~\n// 1.\n5 + \"hi\"; // \"5hi\"\n\n// 2.\nif (\"foo\") {\n  console.log(\"this will show up!\");\n}\n\n// 3.\nif (null) {\n  console.log(\"this won't show up!\");\n}\n\n// 4.\n+\"304\"; // 304\n~~~\n\nLet's figure out what's happening in each of these examples. In the first one, you've asked JavaScript to add a number and a string. In a lot of programming languages, this would throw an error, but JavaScript is more accomodating. It evaluates the expression 5 + \"hi\" by first _coercing_ 5 into a string, and then interpreting the \"+\" operator as string concatenation. So it combines the string \"5\" with the string \"hi\" into the string \"5hi\".\n\nThe next two examples show a similar sort of _coercion_. JavaScript expects the values inside of parentheses that come after the keyword `if` to be booleans. If you pass in a value which is not a boolean, JavaScript will _coerce_ the value to a boolean according to the rules for truthy/falsey values defined on the next step. Since \"foo\" is not a falsey value, it will be coerced to `true`, which is why the second example logs something to the console. `null`, however, is a falsey value, so it gets coerced to false and nothing shows up in the third example.\n\nThe last example shows a very common way to coerce a stringified number back into a number. By prefacing the string with the plus sign, JavaScript will perform a _coercion_ on the value and convert it from a string value to a number value.\n\nIn essence, then, coercion is just the process of converting a value from one type to another. JavaScript uses coercion pretty liberally among programming languages, so if you don't understand how coercion in JavaScript works, it can be easy to introduce bugs into your code.\n\nBut what does all of this have to do with `==` and `===`? Let's look at some examples:\n\n~~~\n5 == \"5\"; // true\n5 === \"5\"; // false\n\"true\" === true; // false\n\"true\" == true; // false\ntrue == 1; // true\ntrue === 1; // false\nundefined === null; // false\nundefined == null; // true\n~~~\n\n\nWhat's going on here? Let's deal with the expressions involving `===` first. As you can see, the expressions `5 === \"5\"`, `\"true\" === true`, `true === 1`, and `undefined === null` all evaluate to `false`. In some sense, perhaps this shouldn't be so surprising: none of the values being compared are the same! One way to think about this is to recall the types of the primitives being compared. In the first case, we're comparing a number to a string; in the second case, a boolean and a string; in the third case, a boolean and a number; and in the last case, `undefined` and `null`. How can these values be the same when the primitives involved aren't even of the same type??\n\nFrom the above examples, you can see that the `==` operator is a little less strict (in fact, `===` is sometimes referred to as the \"strict\" equality operator, while `==` is sometimes referred to as the \"loose\" equality operator). The reason that comparisons like `5 == \"5\"` evaluate to true is because `==` allows for type coercion!\n\nBut what gets coerced? Does `5` become `\"5\"` or does `\"5\"` become `5`? In this case, according to the specification the string gets coerced into a number, not the other way around. This might seem like an unimportant detail, but there are a couple of gotchas in the way coercion works that can be confusing when you first encounter them.\n\nFor example, it might seem like `\"true\" == true` should evaluate to `true`, since `\"true\"` is a truthy value! But in fact, what actually happens is that the boolean `true` gets coerced to a number (1), and then `\"true\"` is compared to `1`, which returns false. (This is also why `true == 1` evaluates to `true`.)\n\nIt's less important to memorize these rules for how coercion works with `==` than to recognize that `==` allows for coercion while `===` doesn't. If you don't want to have to think about coercion in your comparisons, stick to `===`.\n\n## If Else\n\n### If / else statements with other comparators\n\nWe previously saw what an `if` statement looks like. Let's examine this a bit more:\n\n~~~\nvar x = 4;\nif(x <= 5){\n    console.log(\"x is less than or equal to five!\");\n} else {\n    console.log(\"x is not less than or equal to five!\");\n}\n~~~\n\nWe saw before that we can use `==` or `===` to compare values. We can also check for inequality, using\n\n`<` - less than,\n\n`<=` - less than or equal to,\n\n`>` - greater than,\n\n`>=` - greater than or equal to,\n\n`!=` - not equal (loose), and\n\n`!==` - not equal (strict).\n\n### Falsey Values\n\nAs we've alluded to already, another essential concept to understand in JavaScript is that some values (aside from `false`) are actually false as well, when they're used in a context where JavaScript expects a boolean value! Even if they do not have a \"value\" of false, these values will be translated (or \"coerced\") to false when evaluated in a boolean expression.\n\nIn JavaScript there are 6 falsey values:\n\n*   `0`\n*   `\"\"`\n*   `null`\n*   `undefined`\n*   `false`\n*   `NaN` (short for not a number)\n\nIf you ever want to determine if a value is truthy or falsey, you can prefix it with `!!`. By using `!!` it explicitly coerces a value into its boolean form.\n\nWhat do these values return? Try them out in the Chrome console now:\n\n`!!false`  \n`!!-1`  \n`!!-567`  \n`!![]`  \n`!!{}`  \n`!!\"\"`  \n`!!null`\n\nYou can read more about these [here](https://developer.mozilla.org/en-US/docs/Glossary/Falsy)\n\n### !, || and &&\n\nIn our conditions (and assignments) we can use certain logical operators to write more complex statements. Here are some other useful operators:\n\n`!` - the **not** operator, which flips the boolean value (`!true === false`). `!!` simply applies this operator twice, so `!!true === true`, and `!!false === false`.\n\n`||` - the **or** operator, which in a boolean context returns true if either condition is true\n\n`&&` - the **and** operator, which in a boolean context returns true if both conditions are true\n\nYou can read more about logical operators [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators).\n\n### If / else if / else\n\nSometimes you may have more than two conditions to check. In this case, you can chain together multiple conditions using `else if`. Here's an example:\n\n~~~\nvar number = prompt(\"What's your favorite number?\");\n\nif (number >= 1000) {\n    console.log(\"Woah, that's a big number!\");\n} else if (number >= 0) {\n    console.log(\"That's a cool number.\");\n} else {\n    console.log(\"Negative numbers?! That's just bananas.\");\n}\n~~~\n\nTry this out with a few different numbers and see what happens.\n\n### Switch statements\n\nAnother way to write conditional logic is to use a `switch` statement. While these are used less frequently, they can be quite useful when there are multiple conditions that can be met. Notice that each `case` clause needs to end with a `break` so that we exit the `switch` statement. Here is an example:\n\n~~~\nvar feeling = prompt(\"How are you feeling today?\").toLowerCase();\n// what do you think the .toLowerCase does at the end?\n\nswitch(feeling){\n    case \"happy\":\n        console.log(\"Awesome, I'm feeling happy too!\");\n        break;\n    case \"sad\":\n        console.log(\"That's too bad, I hope you feel better soon.\");\n        break;\n    case \"hungry\":\n        console.log(\"Me too, let's go eat some pizza!\");\n        break;\n    default:\n        console.log(\"I see. Thanks for sharing!\");\n}\n~~~\n\n# Exercises\n\n## Exercise 1: Boolean Expressions\n\nWrite down what the following statements will return. Enter them in the console to verify your answers.\n\n1.  `2 == \"2\";`\n2.  `2 === 2;`\n3.  `true && false;`\n4.  `false || true;`\n5.  `true || false;`\n\n## Exercise 2: If Statement\n\nAnswer the following questions about this code block:\n\n~~~\nvar isLearning = true;\nif (isLearning) {\n  console.log(\"Keep it up!\");\n} else {\n  console.log(\"Pretty sure you are learning....\");\n}\n~~~\n\n1.  What should the above code console.log?\n2.  Why do we not need to specify `if(isLearning === true)`? Why does `if(isLearning)` work on its own?\n\nTest the fragment in the chrome developer console.\n"
    },
  
    {
    "title": "# Const, Let & Simple Objects",
    "shortTitle": "05",
    "contentMd" : "# Const, Let & Simple Objects\n\n## Const & Let\n\nThe variable statement declares a variable, optionally initializing it to a value.\n\n### var\n\n~~~\n// String\nvar greeting = “hello\";\n// Number\nvar favoriteNum = 33;\n~~~\n\n### const\n\nThe `const` statement is similar to the var statement, however, the value cannot be redeclared or reassigned.\n\n~~~\n// String\nconst greeting = 'hello';\n\n// Number\nconst favoriteNum = 33;\n~~~\n\nSo if we try this:\n\n~~~\nfavoriteNum = 23;\n~~~\n\nWe will get an error. Try the above in the chrome console now and see what happens. You should see something like this:\n\n![](img/01.png)\n\n\n### let \nWe can also use `let`:\n\n~~~\nlet anotherFavourite = 33;\nanotherFavourite = 32;\n~~~\n\nThis is similar to `var`, in that it introduces a variable that can be reassigned later. It has other benefits we will explore in subsequent lessons.\n\nIn our applications, we will always use `const` or `let`, and avoid using `var`.\n\n## Simple Objects\n\nWhereas primitive data typed variables hold individual values. e.g:\n\n- numbers\n- strings\n- boolean\n\nObject types can hold more than one value. e.g.:\n\n- a number AND a string.\n- 2 numbers and a boolean and a string\n- 3 strings and 2 numbers\n\nObjects are central to creating interesting and powerful programs.\n\nTry this on the console (remember to use Shift and Enter to go onto a new line for entering multiple lines of code:\n\n~~~\nconst homer = {\n  firstName: 'homer',\n  lastName: 'simpson',\n};\n~~~\n\nThen try this:\n\n~~~\nconsole.log(homer);\n~~~\n\nThis will look like this:\n\n![](img/02.png)\n\nTry this object:\n\n~~~\nconst bart = {\n  firstName: 'bart',\n  lastName: 'simpson',\n  age: 10,\n};\n\nconsole.log(bart);\n~~~\n\nWe have now created 2 objects. We can print the two of them again:\n\n~~~\nconsole.log ('Bart = ' + bart);\nconsole.log ('homer = ' + homer);\n~~~\n\nWe can also print out individual attributes:\n\n~~~\nconsole.log ('Barts age =', bart.age);\n~~~\n\n![](img/03.png)\n\n# Exercises\n\nFor these exercises, create:\n\n## simpsons.html\n\n~~~\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>JavaScript Test Site</title>\n    <script src=\"simpsons.js\"></script>\n  </head>\n  <body>\n    <p>Nothing going on yet.</p>\n  </body>\n</html>\n~~~\n\n## simpsons.js\n\n~~~\n// JS Code here\n~~~\n\nAnd use the developer tools in chrome to run and monitor the script.\n\n## Exercise 1: Maggie\n\nIn `simpsons.js`, Create an object called `maggie`, with Maggies details (say her age is 2). Log the object to the console. Load `simpsons.html` and make sure maggies details appear on the console.\n\n## Exercise 2: Lisa\n\nCreate an object called `lisa`, with Lisa's details (say her age is 12). In addition, store her favourite musical instrument. Log the object to the console.\n\n\n\n\n\n\n"
    },
  
    {
    "title": "# Objects with Functions",
    "shortTitle": "06",
    "contentMd" : "# Objects with Functions\n\nTry this object in the console:\n\n~~~\nconst marge = {\n  firstName: 'marge',\n  lastName: 'simpson',\n  age: 10,\n  sayHello() {\n    console.log('Hello from me!');\n  }\n};\n~~~\n\nThis has different type of attribute - a function:\n\n~~~\n  sayHello() {\n    console.log('Hello from me!');\n  }\n~~~\n\nWe can log the object as before:\n\n~~~\nconsole.log(marge);\n~~~\n\nWe can also call the function we have just defined:\n\n~~~\nmarge.sayHello();\n~~~\n\nYour console might look like this:\n\n![](img/05.png)\n\n## this\n\nTry this new object in the console:\n\n~~~\nconst ned = {\n  firstName: 'ned',\n  lastName: 'flanders',\n  age: 45,\n  speak() {\n    console.log('How diddley do? says ' + this.firstName);\n  }\n}\n\nned.speak();\n~~~\n\nNote the difference in the function:\n\n~~~\n  speak() {\n    console.log('How diddley do?' + this.firstName);\n  }\n~~~\n\nHere we are using `this` to access the firstName attribute of the ned object.\n\n![](img/06.png)\n\n# Exercises\n\nUse `simpsons.js` (not the console) for this exercise.\n\n## Exercise 1: Objects with Functions\n\nCreate another Simpsons character of your choice. Include a hello() function, and have the function say something relevant to the character. Also include a goodby() function which says something else. Once you have created the objects, call them functions a few times.\n\n"
    },
  
    {
    "title": "# Chrome Debugger",
    "shortTitle": "07",
    "contentMd" : "# Chrome Debugger\n\nUse this copy of the `simpsons.js` file (copy/paste in, replacing your content:\n\n## simpsons.js\n\n~~~\nconst homer = {\n  firstName: 'homer',\n  lastName: 'simpson',\n};\n\nconsole.log(homer);\n\nconst bart = {\n  firstName: 'bart',\n  lastName: 'simpson',\n  age: 10,\n};\n\nconsole.log(bart);\n\nconst marge = {\n  firstName: 'marge',\n  lastName: 'simpson',\n  age: 10,\n  sayHello() {\n    console.log('Hello from me!');\n  },\n};\n\nmarge.sayHello();\n\nconst ned = {\n  firstName: 'ned',\n  lastName: 'flanders',\n  age: 45,\n  speak() {\n    console.log('How diddley do? says ' + this.firstName);\n  },\n};\n\nned.speak();\n~~~\n\nIn chrome, open `simpsons.html`  again now - and also open developer tools:\n\n![](img/08.png)\n\nSelect the `Sources` tab, and then select `simpsons.js`:\n\n![](img/09.png)\n\nNow, double click in the margin on line 6 - so that a blue arrow appears:\n\n![](img/10.png)\n\nReload the page (press the reload button in the browser tool bar)\n\n![](img/14.png)\n\n... and look carefully at the view now presented:\n\n![](img/11.png)\n\nNotice that the object homer has appeared on the right panel above.\n\nNow try the following - press the `Step over..` button indicated below:\n\n![](img/12.png)\n\nThis will move the blue indicator on in the script:\n\n![](img/13.png)\n\nPress this `Step over` button again a few times. Monitor the changes in the right hand panel as you do this. \n\nReload the page again - step through the script line by line, carefully looking at the right hand pane,.\n\n# Exercise\n\nExperiment with creating and removing the blue indicators in the margin:\n\n![](img/15.png)\n\nThese are called `breakpoints`, and they allow you to stop the program at the point indicated. You can remove a breakpoint by double clicking in the margin. \n\nTry to understand what happens when you press the reload button on the browser. Also, explore the right hand pane in the developer tools console\n\n"
    },
  
    {
    "title": "# Exercises",
    "shortTitle": "Exercises",
    "contentMd" : "# Exercises\n\n## Exercise 1:\n\nUsing the `simpsons.html` and `simpsons.js` files from the last step as a guide, create a new pair of files called `exercise-01.html` and `exercise-01.js`. Make sure exercise-01.html loads exercise-01.js.\n\nIn exercise-01.js, write a function that reads a firstname, lastname and age using the `prompt` function, create and object called `user` that contains these values, and then logs that object to the console.\n\nHint: This is how you prompt the user for a string:\n\n~~~\nconst usersFirstName = prompt('enter first name');\n~~~\n\nAnd this is how you might store the string in an object:\n\n~~~\nconst user = {\n  firstName: usersFirstName,\n};\n~~~\n\n## Exercise 2:\n\nExtend the program to also ask also for a greeting. Extend the object so that it has a member function 'sayHello' that, when called, prints the greeting to the console, including the name of the user.\n\n\n## Exercise 3:\n\nChallenging!\n\nWrite a script that will read two values using prompt()\n\n- the name of a song\n- the artist who composed it\n\nPut these two values in an object called `favourite`. Also, in this object introduce a function called `print()`, which will print the song details to the console.\n\nEg - it might print\n\n~~~\nMy favorite song is Moonlight Sonata by Beethoven\n~~~\n\nIf the values 'Moonlight Sonata' and \"Beethoven\" had been entered.\n\n<hr>\n<br>\nThe solutions are [here](./solutions.html). Try not to look at them until you have had a good go at the exercises first.\n\n## Exercise 4: \n\nAlso Challenging!\n\nAnswer the following questions about this code block:\n\n~~~\nvar firstVariable;\nvar secondVariable = \"\";\nvar thirdVariable = 1;\nvar secretMessage = \"Shh!\";\n\nif(firstVariable){\n  console.log(\"first\");\n} else if(firstVariable || secondVariable){\n  console.log(\"second\");\n} else if(firstVariable || thirdVariable){\n  console.log(\"third\");\n} else {\n  console.log(\"fourth\");\n}\n~~~\n\n1.  What should the above code console.log? **Why?**\n2.  What is the value of `firstVariable` when it is created?\n3.  Is the value of firstVariable a \"truthy\" value? **Why?**\n4.  Is the value of secondVariable a \"truthy\" value? **Why?**\n5.  Is the value of thirdVariable a \"truthy\" value? **Why?**\n\nRun the script - in the console or in first.js - to see if your answers are correct.\n\n\n"
    },
  
    {
    "title": "# Exercise 1:",
    "shortTitle": ".",
    "contentMd" : "# Exercise 1:\n\n~~~\nconst usersFirstName = prompt('enter first name');\nconst usersLastName = prompt('enter first name');\nconst usersAge = prompt('enter first name');\n\nconst user = {\n  firstName: usersFirstName,\n  lastName: usersFirstName,\n  age: usersFirstName,\n};\n\nconsole.log(user);\n~~~\n\n# Exercise 2:\n\n~~~\nconst usersFirstName = prompt('enter first name');\nconst usersLastName = prompt('enter last name');\nconst usersAge = prompt('enter your age');\n\nconst userGreeting = prompt('enter your greeting');\n\nconst user = {\n  firstName: usersFirstName,\n  lastName: usersFirstName,\n  age: usersFirstName,\n  greeting: userGreeting,\n  sayHello() {\n    console.log(this.greeting + ' says ' + this.firstName);\n  },\n};\n\nconsole.log(user);\nuser.sayHello();\n~~~\n\n# Exercise 3:\n\n~~~\nHave a go yourself!\n~~~"
    }
  
  ]
  }

