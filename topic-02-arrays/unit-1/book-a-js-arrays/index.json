


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-3 JS Arrays",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Array Basics, Array Methods &amp; Iteration</p>",
  "folder" : "book-a-js-arrays",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Objectives",
    "shortTitle": "Lab-3 JS Arrays",
    "contentMd" : "# Objectives\n\n Array Basics, Array Methods & Iteration\n"
    },
  
    {
    "title": "# Array Basics",
    "shortTitle": "01",
    "contentMd" : "# Array Basics\n\n## Introduction\n\nSo far, we've seen five different primitive data types in JavaScript: `string`, `number`, `boolean`, `null`, and `undefined`. We've also seen how to store these values inside of variables.\n\nSometimes, however, you need a more complex data structure when building your application. For example, maybe you need a list of restaurant names so that you can display each one to a user when she's looking for a place to eat nearby. Or maybe you're doing some math and want to maintain a list of prime numbers. It would be pretty annoying to have to write\n\n~~~\nconst firstPrime = 2;\nconst secondPrime = 3;\nconst thirdPrime = 5;\nconst fourthPrime = 7;\nconst fifthPrime = 11;\n~~~\n\nThis is fine if you know how many primes you need at the outset, but what if you didn't know how many values you needed to store? Or what if you did know how many values you needed, but the number was quite large? Writing out a variable for each one can quickly become unmanageable.\n\nThankfully, JavaScript provides you with a data type to help in these situations: the _array_. You can think of an array as simply a list of values.\n\nTo write an array in JavaScript, you use square brackets `[]` and comma separate each value in the array. Here are some examples:\n\n~~~\nconst primes = [2, 3, 5, 7, 11];\nconst names = ['Alice', 'Bob', 'Charlie'];\nconst booleans = [true, false, false, true];\nconst mixedTypes = [1, 'sweet', true, null, NaN, 'bye!'];\nconst woahhh = ['Whats up with this? -->', ['Woah', 'crazy!']];\nconst emptyArray = [];\n~~~\n\nYou can put anything you want inside of an array: numbers (as in `primes`), strings (as in `names`), booleans (as in `booleans`), and other primitive types are all fair game. You can also have multiple different types inside of an array: just because the first element in an array is a number doesn't mean that every subsequent element needs to be a number too. For example, `mixedTypes` has many different types inside of it. You can even store arrays inside of other arrays, as in the `woahhh` array above!\n\nAt this point, you may be wondering why we didn't mention arrays when we talked about other data types in JavaScript. The reason is that up until now, we've been dealing with _primitive_ data types in JavaScript. But arrays aren't primitives; they're examples of what's called a reference type. We'll talk about reference types in more detail in the next javascript lab. For now, it's sufficient to note that\n\n~~~\nconsole.log(typeof [1, 2, 3]);\n~~~\n\nprints `object`. So arrays are a type of object, which you used in gomix in last week's lab (more on objects later).\n\n## Accessing and updating array values\n\nTo access an element in an array, we specify the name of the array followed by sqqare brackets brackets and the _position_ (also called the _index_) of the element we're trying to access. **Arrays are zero-indexed**, which means that the first element is accessed at index 0\\. Let's look at an example:\n\n~~~\nconst arr1 = [5, 3, 10];\nconsole.log(arr1[0]); // should equal 5\nconsole.log(arr1[1]); // should equal 3\nconsole.log(arr1[2]); // should equal 10\nconsole.log(arr1[3]); // should be undefined -- remember, arrays are zero-indexed!\nconsole.log(arr1[1 + 1]); // the same as arr[2], which is 10\nconsole.log(arr1[arr1.length - 1]); // shorthand for the last element of an array, in this case 10\n~~~\n\nTo update a value in an array, we can simply assign an element at a given index to a new value:\n\n~~~\nconst arr2 = [5, 3, 10];\narr2[0] = -1000;\narr2[2] = 'dope';\nconsole.log(arr2); // should be [-1000, 3, 'dope']\n~~~\n\n## Adding to arrays\n\nThere are a number of ways you can add elements to an array.\n\nOne way is by setting a value at a new index in the array.\n\n~~~\nconst arr3 = [1,2,3];\narr3[3] = 4;\nconsole.log(arr3); // [1,2,3,4]\n~~~\n\nBe careful with this approach, though -- you can add an element at any index, and any elements that don't have values in them will be filled with `undefined` values.\n\n~~~\nconst arr4 = [1,2,3];\narr4[5] = 'whoa';\nconsole.log(arr4); // [1, 2, 3, undefined, undefined, 'woah']\n~~~\n\nIf you want to add to the end of an array, a better approach is to use the `push` function - this function returns the new length (the number of elements) of the array.\n\n~~~\nconst arr5 = [3, 2, 5];\narr5.push(7); \nconsole.log(arr5); // [3, 2, 5, 7]\n~~~\n\nOn the other hand, if you want to add to the beginning of an array, you can use the `unshift` function. As with `push`, `unshift` returns the length of the modified array.\n\n~~~\nconst arr6 = [1, 2, 3];\narr6.unshift(0);\nconsole.log(arr6); // [0,1,2,3]\n~~~\n\n## Removing from arrays\n\nWe've seen how we can add elements from arrays. But what about removing elements?\n\nOne (not common) way to remove elements is to manually set the length of the array to a number smaller than its current length. For example:\n\n~~~\nconst arr7 = [1, 2, 3];\narr7.length = 2; // set the new length\nconsole.log(arr7); // [1,2]\n~~~\n\nA more common way to remove elements from the back of an array is to use `pop()`. This function works in sort of the opposite way as `push`, by removing items one by one from the back of the array. Unlike `push`, however, `pop` doesn't return the length of the new array; instead, it returns the value that was just removed.\n\n~~~\nconst arr8 = [1,2,3];\narr8.pop(); // returns 3\nconsole.log(arr8); // [1,2]\n~~~\n\nIf you want to remove an element from the _front_ of an array, you should `shift()` (like `unshift`, but the opposite)! As with `pop()`, `shift()` returns the removed value.\n\n~~~\nconst arr9 = [1,2,3];\narr9.shift();\nconsole.log(arr9); // [2,3]\n~~~\n\nThere's also a `delete` keyword in JavaScript, which you might think could be used to delete elements in an array. However, this isn't quite how `delete` works with arrays. When you use this keyword, the value at the index where you delete will simply be replaced by `undefined`. This usually isn't what you want, which is why you won't often see people use `delete` on arrays. It's more common to see this word used with objects, which we'll talk more about in the next unit.\n\n~~~\nconst arr10 = [5, 4, 3, 2];\ndelete arr10[1];\nconsole.log(arr10); // [5, undefined, 3, 2]\n~~~\n\n# Exercises\n\nFor these exercises, create:\n\n- arrays-01.html\n- arrays-01.js\n\nUse this contents for the html file:\n\n## arrays-01.html\n\n~~~\n<html> \n  <head>\n    <title>JavaScript Test Site</title>\n    <script src=\"arrays-01.js\"></script>\n  </head>\n  <body>\n    <p>Nothing going on yet.</p>\n  </body>\n</html>\n~~~\n\nAnd use the developer tools in chrome to run and monitor the script.\n\n## Exercise 1:\n\nIn arrays-01.js, create an array of your favorite foods (call it `favoriteFoods`). Make sure it has at least three elements.\n\n- Access the second element in `favoriteFoods`.\n- Change the last element in `favoriteFoods` to some other food.\n- Remove the first element in `favoriteFoods` and store it in a variable called `formerFavoriteFood`.\n- Add a favorite food to the back of the `favoriteFoods` array.\n- Add a favorite food to the front of the `favoriteFoods` array.\n\n## Exercise 2\n\nWhat happens when you try to `pop` from an empty array? Create an empty array and see how chrome responds to this.\n\n"
    },
  
    {
    "title": "# Array Methods",
    "shortTitle": "02",
    "contentMd" : "# Array Methods\n\nSo far, we've seen how to access, update, add and remove items from an array. We've also encountered some common array methods, including `push`, `pop`, `shift`, `unshift`, and `splice`. But these aren't the only methods you're likely to encounter when working with arrays. Let's take a look at a few more.\n\n## Common array functions and properties\n\n### length\n\n`length` returns how many elements are in the array. This is a property, NOT a function (you can tell because we type `length`, not `length()`. As we've seen, it can (but is almost never) be used to remove elements/clear an array.\n\n~~~\nconst arr14 = [1, 2, 3, 4];\nconsole.log(arr14.length); // 4\nconsole.log(arr14[arr14.length]); // undefined\nconsole.log(arr14[arr14.length - 1]); // 4 - this is a nice way to access the last element of an array when you don't know how many elements are inside it.\n~~~\n\n### slice\n\n`slice` makes a copy of an array. We can use it to copy the entire array, or create a copy of a _subarray_. If we just invoke `slice()` with no arguments, we'll create a copy:\n\n~~~\nconst arr15 = [1, 2, 3, 4];\nconst copy = arr15.slice();\nconsole.log(arr15); // [1,2,3,4];\n~~~\n\nAlternatively, you can pass in two arguments to `slice`. Like `splice`, the first argument indicates the starting index of the subarray you want. The second argument indicates the ending index. The subarray you get will consist of all the values starting from the starting index and going up to (but **not including**) the ending index:\n\n~~~\nconst arr16 = [7, 6, 5, 4, 3, 2];\nconst copya = arr16.slice(1, 2);\nconsole.log(copya); // [6]\nconst copyb = arr16.slice(2, 5);\nconsole.log(copyb); // [5, 4, 3]\nconst copyc = arr16.slice(2, 1);\nconsole.log(copyc); // []\n~~~\n\n### concat\n\n`concat` joins two arrays together.\n\n~~~\nconst arr18 = [1, 2, 3];\nconst arr19 = [4, 5, 6];\nconst combined1 = arr18.concat(arr19);\nconsole.log(combined1); // [1,2,3,4,5,6]\n~~~\n\nIn fact, you can pass multiple arrays into `concat` and it will still return a single array to you:\n\n~~~\nconst arr20 = ['a', 'b', 'c'];\nconst arr21 = ['d', 'e', 'f'];\nconst arr22 = ['g', 'h', 'i'];\nconst combined2 = arr20.concat(arr21, arr22);\nconsole.log(combined2); // ['a','b','c','d','e','f','g','h','i'];\n~~~\n\nWhat's more, you don't even need to pass an array into `concat`! Any comma-separated list of values can be concatenated with the original array:\n\n~~~\nconst openingWords = ['It', 'was', 'a'];\nconst moreOpeningWords = openingWords.concat('dark', 'and', 'stormy', 'night');\nconsole.log(moreOpeningWords); // ['It', 'was', 'a', 'dark', 'and', 'stormy', 'night']\n~~~\n\n### join\n\n`join` joins elements of an array into a string separated by whatever you pass in as an argument to `join`. This argument is frequently referred to as a _delimiter_. Here are a couple of examples:\n\n~~~\nconst arr23 = ['Hello', 'World'];\nconst combined3 = arr23.join(' '); // 'Hello World'\nconsole.log(combined3);\n\nvar arr24 = ['I', 'have', 'a', 'big', 'announcement'];\nconst combined4 = arr24.join('! ') + '!'; // 'I! have! a! big! announcement!'\nconsole.log(combined4);\n~~~\n\n### indexOf\n\n`indexOf` finds the first index of the element passed in (starting from the left). If the element is _not_ found, it returns -1\\. Here are some examples:\n\n~~~\nconst arr25 = [1, 2, 3, 4, 5, 4, 4];\nconsole.log(arr25.indexOf(2)); // 1\nconsole.log(arr25.indexOf(3)); // 2\nconsole.log(arr25.indexOf(1)); // 0 - remember, arrays are zero indexed\nconsole.log(arr25.indexOf(4)); // 3 - indexOf stops once it finds the first 4.\nconsole.log(arr25.indexOf(10)); // -1\n~~~\n\nYou'll see this function very commonly used to check if an element is in an array or not. Here's an example:\n\n~~~\nconst moviesIKnow = [\n  'Waynes World',\n  'The Matrix',\n  'Anchorman',\n  'Bridesmaids',\n];\n\nconst yourFavoriteMovie = prompt('Whats your favorite movie?');\nif (moviesIKnow.indexOf(yourFavoriteMovie) > -1) {\n  alert('Oh, cool, Ive heard of ' + yourFavoriteMovie + '!');\n} else {\n  alert('I havent heard of ' + yourFavoriteMovie + '. Ill check it out.');\n}\n~~~\n\n### lastIndexOf\n\n`lastIndexOf` works just like `indexOf`, but starts searching from the end of the array rather than the beginning.\n\n~~~\nconst arr26 = [1, 2, 3, 4, 5, 4, 4];\nconsole.log(arr26.indexOf(4)); // 3\nconsole.log(arr26.lastIndexOf(4)); // 6 - this one is different now as it starts from the end!\nconsole.log(arr26.lastIndexOf(10)); // -1 - still returns -1 if the value is not found in the array\n~~~\n\n# Exercises\n\nFor these exercises, create:\n\n- arrays-02.html\n- arrays-02.js\n\nAnd use the developer tools in chrome to run and monitor the script.\n\n## arrays-02.html\n\n~~~\n<html> \n  <head>\n    <title>JavaScript Test Site</title>\n    <script src=\"arrays-02.js\"></script>\n  </head>\n  <body>\n    <p>Nothing going on yet.</p>\n  </body>\n</html>\n~~~\n\n## Exercise 1:\n\nIn arrays-02.js, declare an empty array called me like this:\n\n~~~\nconst me = [];\n~~~\n\nAfter writing code for each of the steps below, print out the `me` array like this:\n\n~~~\nconsole.log(me);\n~~~\n\n- Add your first name to the `me` variable\n- Add your last name to the end of the `me` variable\n- Add your favorite color to the beginning of the `me` variable\n- Remove the favorite color from the `me` variable.\n- Create another array called `other`.\n- Add your favorite number to `other`\n- Add the string \"JavaScript\" to the end of the `other` variable\n\n## Exercise 2:\n\nDeclare the following array: \n\n~~~\nconst programming = ['JavaScript', 'Python', 'Ruby', 'Java']\n~~~\n\nThen write the code to do this:\n\n- Create a new array `modernProgramming`, which combines `programming` with the array `['Haskell', 'Clojure']`.\n- Return the string `'JavaScript, Python, Ruby, Java'` by using `join` on the `programming` array.\n\n\n"
    },
  
    {
    "title": "# Array Iteration: for",
    "shortTitle": "03",
    "contentMd" : "# Array Iteration: for\n\nVery often, you'll want to access each element of an array in order and do something with each element. For example, maybe you have an array of tweets, and you want to show each one on the page. Or maybe you have a list of numbers that you want to apply some mathematical operation to.\n\nFor instance, suppose you have an array of numbers that you want to round to the nearest whole number:\n\n~~~\nconst decimals = [1.1, 1.6, 2.8, 0.4, 3.5, 1.6];\n~~~\n\nOne way to do this is to round each element individually using the built-in `Math.round` function:\n\n~~~\ndecimals[0] = Math.round(decimals[0]);\ndecimals[1] = Math.round(decimals[1]);\ndecimals[2] = Math.round(decimals[2]);\ndecimals[3] = Math.round(decimals[3]);\ndecimals[4] = Math.round(decimals[4]);\ndecimals[5] = Math.round(decimals[5]);\n~~~\n\nNow if you look at `decimals`, you should see that it is equal to `[1, 2, 3, 0, 4, 2]`. Great! We've rounded all of our numbers.\n\nBut this approach isn't great. What if we have 100 numbers we want to round? Or 1,000? And what if we want to do something more complicated than simply round each one? The approach we've used here doesn't scale very well.\n\nThankfully, there's a better way to make your way through an array and do something with each element, through a process called _iteration_, or looping. Let's talk about iteration in general, and then see how we can apply it to arrays.\n\n## Iteration: For loops\n\nOne of the most common ways to loop is with a `for` loop. A `for` loop consists of three parts followed by a block of code inside of curly braces `{}`:\n\n`for (initializer, condition, counter) {}`\n\n`initializer` - this is where we can declare variables to be used in the loop. We usually declare a variable called `i` which will serve as a counter variable for the number of times that we should loop.\n\n`condition` - this MUST be an expression that returns `true` or `false`. You can read this condition as \"Keep looping as long as this condition is true.\"\n\n`counter` - this is how we change the variables initialized (typically, either by increasing or decreasing them). We commonly increment variables by 1 using the `++` operator and decrement by 1 using `--`.\n\nAs long as the condition is true, the code inside the curly braces will run. After running, the counter expression will run, and then the condition will be checked again.\n\n~~~\n// start with a variable called i and set it to 0\n// keep looping as long as i is less than 5\n// at the end of each for loop, increase the value of i\nfor (let a = 0; a < 5; a++) {\n  console.log(a);\n}\n\n// prints out:\n\n// 0\n// 1\n// 2\n// 3\n// 4\n~~~\n\nWhat gets logged if you change `i<5` to `i<10`? If you change `i++` to `i+=3`? Experimenting with the initializer, condition, and counter is a great way to develop your intuition for `for` loops!\n\nYou can use a loop to iterate through an array in a similar fashion. In this case, typically `i` refers to the current index in the array, the `condition` tells the loop to continue until `i` equals the length of the array, and the `counter` increments `i`. Let's see how we could refactor our earlier rounding example to use a for loop:\n\n~~~\nconst decimals2 = [1.1, 1.6, 2.8, 0.4, 3.5, 1.6];\n\nfor (let i = 0; i < decimals2.length; i++) {\n    decimals2[i] = Math.round(decimals[i]);\n}\n~~~\n\n\n## Strings Revisited\n\nNow that we've learned about arrays, let's briefly return to strings and compare and contrast these two data types. They do have some similarities, but it's important to understand their differences as well.\n\n#### Looping over strings\n\nJust like we can iterate over arrays (and objects), we can also iterate over strings! Since strings have a `length` property, we always know at what point to stop looping, just like with arrays. Let's see an example of looping over a string:\n\n~~~\nconst name = 'elie';\n\nfor (let t = 0; t < name.length; t++) {\n  console.log(name[t]);\n}\n\n// e\n// l\n// i\n// e\n~~~\n\n# Exercises\n\nFor these exercises, create:\n\n- arrays-03.html\n- arrays-03.js\n\nAnd use the developer tools in chrome to run and monitor the script.\n\n## arrays-03.html\n\n~~~\n<html> \n  <head>\n    <title>JavaScript Test Site</title>\n    <script src=\"arrays-03.js\"></script>\n  </head>\n  <body>\n    <p>Nothing going on yet.</p>\n  </body>\n</html>\n~~~\n\n## Exercises 1: Array iteration\n\nIntroduce this array:\n~~~\nconst people = ['Greg', 'Mary', 'Devon', 'James'];\n~~~\n\n- Using a loop, iterate through this array and console.log all of the people.\n- Again using a loop, iterate in the reverse direction, logging the people starting at 'James' and finishing with 'Greg'\n\n## Exercises 1: Array mutation.\n\nUsing the same array as in exercise 1:\n\n- Write the code to remove \"Greg\" from the array.\n- Write the code to remove \"James\" from the array.\n- Write the code to add \"Matt\" to the front of the array.\n- Write the code to add your name to the end of the array.\n\n\n"
    },
  
    {
    "title": "# Array Iteration: While loops",
    "shortTitle": "04",
    "contentMd" : "# Array Iteration: While loops\n\nAlong with `for` loops, we can also use a `while` loop. Unlike `for` loops, `while` loops only take a `condition`. This means that you need to handle initialization before the loop, and incrementing/decrementing yourself inside of the loop. If you forget to increment/decrement inside the loop, the loop will never terminate! Instead, you'll be stuck in what's called an _infinite loop_!\n\nHere's an example of a working `while` loop:\n\n~~~\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}\n~~~\n\nHere's how we could rewrite our rounding example to use a `while` loop:\n\n~~~\nlet decimals3 = [1.1, 1.6, 2.8, 0.4, 3.5, 1.6];\nlet j = 0;\n\nwhile (j < decimals.length) {\n  decimals3[j] = Math.round(decimals[j]);\n  j++;\n}\n~~~\n\n### Iteration: Do While Loops\n\nSimilar to while loops, we can also write `do...while` loops, which specify our `condition` at the end. Here is an example:\n\n~~~\nlet k = 0;\ndo {\n  console.log(k);\n  k++;\n} while (k < 5);\n~~~\n\nThe main difference between a `while` loop and a `do...while` loop is that the code inside of a `do...while` loop is guaranteed to execute at least once. For example:\n\n~~~\nlet m = 0;\nwhile (m < 0) {\n  console.log(m);\n  m++;\n}\n\n// nothing is logged, since 0 < 0 is false\n\nlet n = 0;\ndo {\n  console.log(n);\n  n++;\n} while (n < 0);\n\n// 0 gets logged, since the code inside the block runs once\n// before the while condition is checked\n~~~\n\nHere's how we could rewrite our rounding example to use a `do...while` loop:\n\n~~~\nconst decimals4 = [1.1, 1.6, 2.8, 0.4, 3.5, 1.6];\nvar p = 0;\n\ndo {\n  decimals4[p] = Math.round(decimals4[p]);\n  p++;\n} while (p < decimals4.length);\n~~~\n\n### Exiting out of loops\n\nSometimes we want to exit a loop before it has finished. To do that, we use the word `break`\n\n~~~\nfor (let q = 0; q < 5; q++) {\n  if (Math.random() > 0.5) {\n    console.log('Breaking out of the loop when q is ' + q);\n    break;\n  }\n  else {\n    console.log(i);\n  }\n}\n~~~\n\nWe can also skip the current iteration and continue the loop at the next step in the itration by using the word `continue`\n\n~~~\nfor (let r = 0; r < 5; r++) {\n  if (Math.random() > 0.5) {\n    console.log('Skipping the console.log when i is ' + r);\n    continue;\n  }\n  console.log(i);\n}\n~~~\n\n# Exercises\n\nFor these exercises, create:\n\n- arrays-04.html\n- arrays-04.js\n\nAnd use the developer tools in chrome to run and monitor the script.\n\n## arrays-04.html\n\n~~~\n<html> \n  <head>\n    <title>JavaScript Test Site</title>\n    <script src=\"arrays-04.js\"></script>\n  </head>\n  <body>\n    <p>Nothing going on yet.</p>\n  </body>\n</html>\n~~~\n# Exercise 1: Iteration\n\nUsing this array:\n\n~~~\nconst people = ['Greg', 'Mary', 'Devon', 'James'];\n~~~\n\n- Using a loop, iterate through `people` array and after logging \"Mary\", exit from the loop.\n- Write code to make a copy of the array\n- Write the code that gives the index of where \"Mary\" is located.\n- Write the code that gives the index of where \"Foo\" is located (this should return `-1`).\n"
    },
  
    {
    "title": "# Arrays of Objects",
    "shortTitle": "05",
    "contentMd" : "# Arrays of Objects\n\nCreate a file called `arrays3.js` declare this array:\n\n~~~\nconst songList = [\n  'Piano Sonata No. 3',\n  'Piano Sonata No. 7',\n  'Piano Sonata No. 10',\n];\n\nconsole.log(songList);\n~~~\n\nWe can write a loop to print out the elements individually:\n\n~~~\nfor (let i = 0; i < songList.length; i++) {\n  console.log('Song ' + i + ':' + songList[i]);\n}\n~~~\n\nThis should render as:\n\n~~~\nSong 0:Piano Sonata No. 3\nSong 1:Piano Sonata No. 7\nSong 2:Piano Sonata No. 10\n~~~\n\nWhat if we wanted to record both the song and the artist? We could try this:\n\n~~~\nconst songList2 = [\n  'Piano Sonata No. 3',\n  'Beethoven',\n  'Piano Sonata No. 7',\n  'Beethoven',\n  'Piano Sonata No. 10',\n  'Beethoven',\n];\n\nfor (let k = 0; k < songList2.length; k++) {\n  console.log('Song ' + k + ':' + songList2[k]);\n}\n~~~\n\nThis code outputs the array to the console like this:\n\n~~~\nSong 0:Piano Sonata No. 3\nSong 1:Beethoven\nSong 2:Piano Sonata No. 7\nSong 3:Beethoven\nSong 4:Piano Sonata No. 10\nSong 5:Beethoven\n~~~\n\nHowever, this is very inconvenient and difficult to manage. The output above does not really represent our intention. We could try this:\n\n~~~\nfor (let k = 0; k < songList2.length; k=k+2) {\n  console.log('Song ' + k + ': Title: ' + songList2[k] + ': Artist: ' + songList2[k + 1]);\n}\n~~~\n\nWhich outputs:\n\n~~~\nSong 0: Title: Piano Sonata No. 3: Artist: Beethoven\nSong 2: Title: Piano Sonata No. 7: Artist: Beethoven\nSong 4: Title: Piano Sonata No. 10: Artist: Beethoven\n~~~\n\nCloser to our intention - but still not satisfactory (the Song numbers look wrong).\n\nInstead of an array of strings, we need an array of `songs`, with each song containing a title + artist:\n~~~\n\nconst songList3 = [\n  {\n    title: 'Piano Sonata No. 3',\n    artist: 'Beethoven',\n  },\n  {\n    title: 'Piano Sonata No. 7',\n    artist: 'Beethoven',\n  },\n  {\n    title: 'Piano Sonata No. 10',\n    artist: 'Beethoven',\n  },\n];\n~~~\n\nLook carefully at the above - we are defining an array as before, but each array is an object containing two fields:\n\n- title\n- artist\n\nWe can now output the play list more conveniently:\n\n~~~\nfor (let j = 0; j < songList3.length; j++) {\n  console.log('Song ' + j + ': Title: ' + songList3[j].title + ': Artist: ' + songList3[j].artist);\n}\n~~~\n\nNote how we access each element:\n\n~~~\nsongList3[j].title  ... songList3[j].artist\n~~~\n\nEach element is an object, so we can access each attribute using '.' and then the name of the attribute.\n\n# Exercises\n\nFor these exercises, create:\n\n- arrays-05.html\n- arrays-05.js\n\nUse this contents for the html file:\n\n## arrays-05.html\n\n~~~\n<html> \n  <head>\n    <title>JavaScript Test Site</title>\n    <script src=\"arrays-05.js\"></script>\n  </head>\n  <body>\n    <p>Nothing going on yet.</p>\n  </body>\n</html>\n~~~\n\n## Exercise 1: \n\nExtend songList3 to include a 'duration' field for each song. This should be a simple number. Have the this number included in the log when the list is printed out.\n\n## Exercise 2:\n\nOutput the total number of songs when all song details have been printed out.\n\n## Exercise 3:\n\nAlong with the total number of songs, see if you can also print out the total duration. This should be a simple total of the duration of all individual songs.\n\n\n\n"
    },
  
    {
    "title": "# Nested Arrays",
    "shortTitle": "06",
    "contentMd" : "# Nested Arrays\n\nHere is a more complex datastructure, representing multiple playlists:\n\n~~~js\nconst playlistCollection = [\n  {\n    id: \"01\",\n    title: \"Beethoven Sonatas\",\n    songs: [\n      {\n        id: \"04\",\n        title: \"Piano Sonata No. 3\",\n        artist: \"Beethoven\",\n      },\n      {\n        id: \"05\",\n        title: \"Piano Sonata No. 7\",\n        artist: \"Beethoven\",\n      },\n      {\n        id: \"06\",\n        title: \"Piano Sonata No. 10\",\n        artist: \"Beethoven\",\n      }\n    ]\n  },\n  {\n    id: \"02\",\n    title: \"Beethoven Concertos\",\n    songs: [\n      {\n        id: \"07\",\n        title: \"Piano Concerto No. 0\",\n        artist: \"Beethoven\",\n      },\n      {\n        id: \"08\",\n        title: \"Piano Concerto No. 4\",\n        artist: \"Beethoven\",\n      },\n      {\n        id: \"09\",\n        title: \"Piano Concerto No. 6\",\n        artist: \"Beethoven\",\n      }\n    ]\n  },\n  {\n    id: \"03\",\n    title: \"Beethoven Variations\",\n    songs: [\n      {\n        id: \"10\",\n        title: \"Opus 34: Six variations on a theme in F major\",\n        artist: \"Beethoven\",\n      },\n      {\n        id: \"11\",\n        title: \"Opus 120: Thirty-three variations on a waltz by Diabelli in C majo\",\n        artist: \"Beethoven\",\n      }\n    ]\n  }\n];\n~~~\n\n# Exercises\n\nFor these exercises, create:\n\n- arrays-06.html\n- arrays-06.js\n\nUse this contents for the html file:\n\n## arrays-06.html\n\n~~~\n<html> \n  <head>\n    <title>JavaScript Test Site</title>\n    <script src=\"arrays-06.js\"></script>\n  </head>\n  <body>\n    <p>Nothing going on yet.</p>\n  </body>\n</html>\n~~~\n\n## Exercise 1: \n\nTry the following - and observe the output in the console:\n\n~~~\nconsole.log (playlistCollection);\n~~~\n\n## Exercise 2: \n\nComment out the above, and try this instead:\n\n~~~\nfor (let i = 0; i < playlistCollection.length; i++) {\n  console.log(playlistCollection[i]);\n}\n~~~\n\nCompare the output form this with the previous version.\n\n## Exercise 3:\n\nComment out the above, and try this instead:\n\n~~~\nfor (let i = 0; i < playlistCollection.length; i++) {\n  console.log(playlistCollection[i].title)\n}\n~~~\n\nCompare the output form this with the previous version.\n\n## Exercise 4:\n\nThese last two are more complex - try each on in turn and compare the console output:\n\n~~~~\nfor (let i = 0; i < playlistCollection.length; i++) {\n  console.log(playlistCollection[i].title)\n  for (let j=0; j < playlistCollection[i].songs.length; j++) {\n    console.log(playlistCollection[i].songs[j]);\n  }\n}\n~~~~\n\n~~~\nfor (let i = 0; i < playlistCollection.length; i++) {\n  console.log(playlistCollection[i].title)\n  for (let j=0; j < playlistCollection[i].songs.length; j++) {\n    console.log(playlistCollection[i].songs[j].title);\n    console.log(playlistCollection[i].songs[j].artist);\n  }\n}\n~~~\n\n"
    }
  
  ]
  }

