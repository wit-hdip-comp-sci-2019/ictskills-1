


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-5 Playlist 2",
  "img" : "img/main.png",
  "videoid" : "T3JfDS05FG4",
  "objectives" : "<p>Refactor the dashboard controller to show summary on of the playlists + link to show playlist details.</p>",
  "folder" : "book-a-playlist-2",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Objectives",
    "shortTitle": "Lab-5 Playlist 2",
    "contentMd" : "# Objectives\n\nRefactor the dashboard controller to show summary on of the playlists + link to show playlist details.\n\n\n"
    },
  
    {
    "title": "# Exercise Solutions",
    "shortTitle": "Exercise Solutions",
    "contentMd" : "# Exercise Solutions\n\nThis lab requires that the `playlist-1` lab be completed. If you have lost your solution, create a new project in Glitch by cloning this repo:\n\n- <https://github.com/wit-hdip-comp-sci-2019/playlist-1>\n\nInstructions on how to do this are [here](https://wit-hdip-comp-sci-2019.github.io/ictskills-1//topic-03-web-apps/unit-2/book-a-glitch-playlist-1/index.html#/01). Remember to use the url above.\n\nThese are three exercises from the last lab:\n\n## Exercise 2: Add a new playlist\n\nExtend the JSON file to include an additional playlist - so that three playlists are displayed on the dashboard.\n\n## Exercise 3: Introduce IDs\n\nWhen manipulating data maintained in JSON, or other external format, each object will often require an ID in order to manipulate the information effectively. Introduce an ID for every playlist, and every song.\n\n## Exercise 4: New Fields\n\nExtend the playlist to have new entry called `duration`. Also, extend each song to also have a `duration` field + a `genre` field.\n\nModify the dashboard view to display these new fields.\n\n## Solutions\n\nThese are solutions to all three exercises:\n\nFirst the extended model:\n\n## models/playlist-store.json\n\n~~~js\n{\n  \"playlistCollection\": [\n    {\n      \"id\" : \"01\",\n      \"title\": \"Beethoven Sonatas\",\n      \"duration\": 35,\n      \"songs\": [\n        {\n          \"id\" : \"04\",\n          \"title\": \"Piano Sonata No. 3\",\n          \"artist\": \"Beethoven\",\n          \"genre\": \"Classical\",\n          \"duration\": 5\n        },\n        {\n          \"id\" : \"05\",\n          \"title\": \"Piano Sonata No. 7\",\n          \"artist\": \"Beethoven\",\n          \"genre\": \"Classical\",\n          \"duration\": 6\n        },\n        {\n          \"id\" : \"06\",\n          \"title\": \"Piano Sonata No. 10\",\n          \"artist\": \"Beethoven\",\n          \"genre\": \"Classical\",\n          \"duration\": 4\n        }\n      ]\n    },\n    {\n      \"id\" : \"02\",\n      \"title\": \"Beethoven Concertos\",\n      \"duration\": 23,\n      \"songs\": [\n        {\n          \"id\" : \"07\",\n          \"title\": \"Piano Concerto No. 0\",\n          \"artist\": \"Beethoven\",\n          \"genre\": \"Classical\",\n          \"duration\": 8\n        },\n        {\n          \"id\" : \"08\",\n          \"title\": \"Piano Concerto No. 4\",\n          \"artist\": \"Beethoven\",\n          \"genre\": \"Classical\",\n          \"duration\": 3\n        },\n        {\n          \"id\" : \"09\",\n          \"title\": \"Piano Concerto No. 6\",\n          \"artist\": \"Beethoven\",\n          \"genre\": \"Classical\",\n          \"duration\": 4\n        }\n      ]\n    },\n    {\n      \"id\" : \"03\",\n      \"title\": \"Beethoven Variations\",\n      \"duration\": 67,\n      \"songs\": [\n        {\n          \"id\" : \"10\",\n          \"title\": \"Opus 34: Six variations on a theme in F major\",\n          \"artist\": \"Beethoven\",\n          \"genre\": \"Classical\",\n          \"duration\": 11\n        },\n        {\n          \"id\" : \"11\",\n          \"title\": \"Opus 120: Thirty-three variations on a waltz by Diabelli in C majo\",\n          \"artist\": \"Beethoven\",\n          \"genre\": \"Classical\",\n          \"duration\": 45\n        }\n      ]\n    }\n  ]\n}\n~~~\n\nNow we can revise the dashboard to show additional fields:\n\n## views/dashboard.hbs\n\n~~~html\n{{> menu id=\"dashboard\"}}\n\n{{#each playlists}}\n  <section class=\"ui segment\">\n    <h2 class=\"ui header\">\n      {{title}}\n    </h2>\n    <p> Total Duration: {{duration}} </p>\n    <table class=\"ui table\">\n      <thead>\n        <tr>\n          <th>Song</th>\n          <th>Artist</th>\n          <th>Genre</th>\n          <th>Duration</th>\n        </tr>\n      </thead>\n      <tbody>\n        {{#each songs}}\n          <tr>\n            <td>\n              {{title}}\n            </td>\n            <td>\n              {{artist}}\n            </td>\n            <td>\n              {{genre}}\n            </td>\n            <td>\n              {{duration}}\n            </td>\n          </tr>\n        {{/each}}\n      </tbody>\n    </table>\n  </section>\n{{/each}}\n~~~\n\nThe dashboard should look like this now:\n\n![](img/06.png)\n\n\n"
    },
  
    {
    "title": "# Playlist Summaries",
    "shortTitle": "01",
    "contentMd" : "# Playlist Summaries\n\nWe would like to change the app to just display a list of playlists on the dashboard, not the complete contents of each playlist. Replace the current dashboard with the following:\n\n## views/dashboard.hbs\n\n~~~html\n{{> menu id=\"dashboard\"}}\n\n{{#each playlists}}\n  <section class=\"ui segment\">\n    <h2 class=\"ui header\">\n      {{title}}\n    </h2>\n    <p> Total Duration: {{duration}} </p>\n    <a href=\"#\"> View </a>\n  </section>\n{{/each}}\n~~~\n\nThis will render like this:\n\n![](img/01.png)\n\nThe `view` links are currently inert, but we would like them to cause a new view to be rendered, containing the playlist concerned.\n\nAs each playlist now has an ID, this can make this convenient to implement. Here is a new version of the `view` link:\n\n~~~html\n    <a href=\"/playlist/{{id}}\"> View </a>\n~~~\n\nWith this change in place, try hovering over each view link (without pressing it). In Chrome, keep an eye on the stats bar which should show a the link including the id:\n\n![](img/02.png)\n\nHover over each link and note how the ID changes. Clicking on any link causes the following error:\n\n~~~\nCannot GET /playlist/02\n~~~\n\nWe need a new controller to display a new view containing the playlist details. We will do this in the next step.\n"
    },
  
    {
    "title": "# Router + Controller",
    "shortTitle": "02",
    "contentMd" : "# Router + Controller\n\nThe starting point for any new link in our app is to first define a `route` to support this link. All supported routes are defined in `routes.js`\n\nThis is the current version:\n\n## routes.js\n\n~~~js\n'use strict';\n\nconst express = require('express');\nconst router = express.Router();\n\nconst dashboard = require('./controllers/dashboard.js');\nconst about = require('./controllers/about.js');\n\nrouter.get('/', dashboard.index);\nrouter.get('/dashboard', dashboard.index);\nrouter.get('/about', about.index);\n\nmodule.exports = router;\n~~~\n\nIn particular, these are the three routes currently supported:\n\n~~~js\nrouter.get('/', dashboard.index);\nrouter.get('/dashboard', dashboard.index);\nrouter.get('/about', about.index);\n~~~\n\nThese are the three patterns our app responds to: `/`, `/dashboard` and `/about`. Any other pattern will generate a not found error from our app.\n\nWe now have a new pattern `/playlist/id`, which we would like to route to a controller that would render a new view detailing the playlist contents. Also note that each of these statements matches a route pattern with a function inside a controller. \n\nSo, for instance, this import + route:\n\n~~~js\nconst about = require('./controllers/about.js');\n...\nrouter.get('/about', about.index);\n~~~\n\n... ensures that this function would be called if the route was triggered:\n\n~~~js\nconst about = {\n  index(request, response) {\n    const viewData = {\n      title: 'About Playlist Maker',\n    };\n    response.render('about', viewData);\n  },\n};\n~~~\n\nMake sure you understand this connection before proceeding. Try changing the spelling of the index method for instance - and see what happens (make sure to change it back!).\n"
    },
  
    {
    "title": "# Controller/View/Route",
    "shortTitle": "03",
    "contentMd" : "# Controller/View/Route\n\nBringing in a new controller usually requires three things:\n\n- a controller\n- a view\n- a route\n\nHere is is the new controller:\n\n## controllers/playlist.js\n\n~~~js\n'use strict';\n\nconst logger = require('../utils/logger');\nconst playlistCollection = require('../models/playlist-store.js');\n\nconst playlist = {\n  index(request, response) {\n    const viewData = {\n      title: 'Playlist',\n    };\n    response.render('playlist', viewData);\n  },\n};\n\nmodule.exports = playlist;\n~~~\n\nCreate this in glitch by pressing the `New File` button:\n\n![](img/07.png)\n\nMake sure to enter the folder + file name as shown above.\n\nThis new controller will render a view called `playlist`. Create this view in glitch now:\n\n## views/playlist.hbs\n\n~~~html\n{{> menu}}\n\n<section class=\"ui center aligned middle aligned segment\">\n  <h2 class=\"ui header\">\n    Playlist Details...\n  </h2>\n</section>\n~~~\n\nFinally, the route. This will require the controller to be imported at the top of the module:\n\n## routes.js\n\n~~~js\n...\nconst playlist = require('./controllers/playlist.js');\n...\n~~~\n\n... and then we can add the new route:\n\n~~~js\nrouter.get('/playlist/:id', playlist.index);\n~~~\n\nNotice that the route includes this segment: `/:id`. This means it matches any route that includes an extra wildcard segment at the end.\n\nImplement all of the above now and verify that the view is rendered as expected. \n\nIt does not display the playlist yet - just a placeholder for the moment:\n\n![](img/09.png)\n\n"
    },
  
    {
    "title": "# Playlists",
    "shortTitle": "04",
    "contentMd" : "# Playlists\n\nIn order to display the correct playlist, we need to extract the id from the url. Modify the playlist controller index method as follows:\n\n~~~js\n  index(request, response) {\n    const playlistId = request.params.id;\n    logger.info('Playlist id = ' + playlistId);\n    const viewData = {\n      title: 'Playlist',\n    };\n    response.render('playlist', viewData);\n  },\n~~~\n\n(be careful - it is just the index method we are replacing - not the entire module)\n\nWe are extracting and logging the id here:\n\n~~~\n    const playlistId = request.params.id;\n    logger.info('Playlist id = ' + playlistId);\n~~~\n\nRun the app and select each of the playlist links in turn. The logs will display each of the Ids as you do this:\n\n![](img/10.png)\n\nWe need to find a way of locating the playlist with the id, and then pass this specific playlist to the view to be rendered. This requires a rethink of the model, in particular the `playlist-store.js` module.\n\nThis currently looks like this:\n\n## models/playlist-sto\n~~~\n\"use strict\";\n\nconst playlistCollection = require(\"./playlist-store.json\").playlistCollection;\n\nmodule.exports = playlistCollection;\n~~~\n\nAll it is doing is locating the playListCollection array in the playlist-store.json file and exporting it to whomsoever requires it.\n\nHere is a new version of this module:\n\n## models/playlist-store.js\n\n~~~js\n'use strict';\n\nconst playlistStore = {\n\n  playlistCollection: require('./playlist-store.json').playlistCollection,\n\n  getAllPlaylists() {\n    return this.playlistCollection;\n  },\n\n  getPlaylist(id) {\n    let foundPlaylist = null;\n    for (let playlist of this.playlistCollection) {\n      if (id == playlist.id) {\n        foundPlaylist = playlist;\n      }\n    }\n\n    return foundPlaylist;\n  },\n};\n\nmodule.exports = playlistStore;\n~~~\n\nIn this version, we have an object `playlsitStore` one attribute:\n\n- `playListCollection`: this is the array of playlists loaded from the json file.\n\nand two functions:\n\n- `getAllPlaylists()` : return all playlists\n- `getlPlaylist(id)`: locate and return a specific playlist.\n\nThe Dashboard controller will have to be refactored to use this object:\n\n## controllers/dashboard.js\n\n~~~js\n\"use strict\";\n\nconst logger = require(\"../utils/logger\");\nconst playlistStore = require('../models/playlist-store');\n\nconst dashboard = {\n  index(request, response) {\n    logger.info('dashboard rendering');\n    const viewData = {\n      title: 'Playlist Dashboard',\n      playlists: playlistStore.getAllPlaylists(),\n    };\n    logger.info('about to render', playlistStore.getAllPlaylists());\n    response.render('dashboard', viewData);\n  },\n};\n\nmodule.exports = dashboard;\n~~~\n\nIn the above we are importing the playListStore object. Then, when we are creating the viewData object, we are calling `playlistStore.getAllPlaylists()`. This will place all playlists into the viewData object.\n\nFinally, the playlists controller + view can be implemented:\n\n## controllers/playlist.js\n\n~~~js\n'use strict';\n\nconst logger = require('../utils/logger');\nconst playlistStore = require('../models/playlist-store');\n\nconst playlist = {\n  index(request, response) {\n    const playlistId = request.params.id;\n    logger.debug('Playlist id = ', playlistId);\n    const viewData = {\n      title: 'Playlist',\n      playlist: playlistStore.getPlaylist(playlistId),\n    };\n    response.render('playlist', viewData);\n  },\n};\n\nmodule.exports = playlist;\n~~~\n\nNotice the way in which we are creating the viewData object this time:\n\n~~~\n    const viewData = {\n      title: 'Playlist',\n      playlist: playlistStore.getPlaylist(playlistId),\n    };\n~~~\n\nWe are getting as specific playlist - with the id playlistId - and placing it in the viewData object.\n\nNow we can now rework playlist.hbs to display the playlist title + trigger listsongs.hbs:\n\n## views/playlist.hbs\n\n~~~html\n{{> menu}}\n\n<section class=\"ui center aligned middle aligned segment\">\n  <h2 class=\"ui header\">\n    {{playlist.title}}\n  </h2>\n  {{> listsongs}}\n</section>\n~~~\n\nListsongs will pick up the playlist and display each song (look at the listsongs.hbs again)\n\nThe app should now run as expected, with playlist summaries on the dashboard, and a view link rendering the playlists details:\n\n![](img/11.png)\n![](img/12.png)\n\n\n"
    },
  
    {
    "title": "# Deleting Songs : Part 1",
    "shortTitle": "05",
    "contentMd" : "# Deleting Songs : Part 1\n\nHaving a playlist app, without the ability to create/delete songs or playlists is clearly very limited. We have, essentially, an app that allows us to `Read` our models, but not `Create`, `Update` or `Delete` elements of the model.\n\nWe can start with providing a facility to delete songs from individual playlists. At the end of this step our view will look like this:\n\n![](img/03.png)\n\nPressing the delete button should remove the corresponding song.\n\nAny new button/link/action on our page requires:\n\n- an element in a view\n- a route matching the view element\n- a matching controller function\n\n.. and it may also involve some interaction with the model.\n\n# View\n\nThe new button must appear in each song row:\n\n## views/partials/listsongs.hbs\n\n~~~html\n    ...\n        <td>\n          <a href=\"/playlist/{{../playlist.id}}/deletesong/{{id}}\" class=\"ui tiny red button\">Delete Song</a>\n        </td>\n    ...\n~~~\n\n\n# Route\n\nA new route - containing both the playlist and song id - and linking to a new function in the playlist controller:\n\n## routes.js\n\n~~~js\nrouter.get('/playlist/:id/deletesong/:songid', playlist.deleteSong);\n~~~\n\n# Controller\n\nThis is a new method to handle this route in the playlist controller:\n\n## controllers/playlist.js\n\n~~~js\n  deleteSong(request, response) {\n    const playlistId = request.params.id;\n    const songId = request.params.songid;\n    logger.debug(`Deleting Song ${songId} from Playlist ${playlistId}`);\n    playlistStore.removeSong(playlistId, songId);\n    response.redirect('/playlist/' + playlistId);\n  },\n~~~\n\n# Model\n\nThe model now needs a new method to delete a song, given the id of the playlist and the song:\n\n## models/playlist-store.js\n\n~~~js\n  removeSong(id, songId) {\n    const playlist = this.getPlaylist(id);\n\n    // TODO : remove the song with id songId from the playlist\n  },\n~~~\n\nTry all of this now - and verify that the logs shows the attempt to delete the song when the button is pressed.\n\nWe havent actually deleted the song - we will leave that to the next step.\n\n"
    },
  
    {
    "title": "# Deleting Songs : Part 2",
    "shortTitle": "06",
    "contentMd" : "# Deleting Songs : Part 2\n\nThere are many techniques for deleting an element from an array, which require more in depth Javascript knowledge. However, we have a simpler solution for the moment via the `lodash` library.\n\nAt the top of our `playlist-store.js` module, import this library:\n\n## models/playlist-store.js\n\n~~~js\nconst _ = require('lodash');\n~~~\n\nHere is the complete `removeSong` function:\n\n~~~js\n  removeSong(id, songId) {\n    const playlist = this.getPlaylist(id);\n    _.remove(playlist.songs, { id: songId });\n  },\n~~~\n\nThis library is already installed in our project template - and you can read about how it works and what is does:\n\n- <https://lodash.com/>\n\nThis is a modern, comprehensive library for managing data structures in Javascript. Watch this video:\n\n- <https://egghead.io/lessons/core-javascript-introduction-to-lodash>\n\nWhich will give you a very brief idea of some of the features of this library. This library has many features and capabilities and we will explore some of them in subsequent labs.\n\nAs a start - we can simplify the `getPlaylist` function:\n\n~~~js\n  getPlaylist(id) {\n    let foundPlaylist = null;\n    for (let playlist of this.playlistCollection) {\n      if (id == playlist.id) {\n        foundPlaylist = playlist;\n      }\n    }\n\n    return foundPlaylist;\n  },\n~~~\n\nThis performs a linear search to locate and return a playlist with a matching id. This can be simplified using lodash:\n\n~~~js\n  getPlaylist(id) {\n    return _.find(this.playlistCollection, { id: id });\n  },\n~~~\n\nIn future, when we are working with our playlists, we will usually check with lodash when we need to do anything, to see if it has a shorter/easier technique than writing our own algorithms.\n\nFor some more advanced uses, skim read this:\n\n- <http://colintoh.com/blog/lodash-10-javascript-utility-functions-stop-rewriting>\n\n"
    },
  
    {
    "title": "# Exercises",
    "shortTitle": "Exercises",
    "contentMd" : "# Exercises\n\nIf you want to download a complete version of the app as it should be at the end of this lab, then create a new Glitch project, and clone this repo:\n\n- <https://github.com/wit-hdip-comp-sci-2019/playlist-2>\n\n## Exercise 1: UX Enhancements\n\nIntroduce a 'Delete Playlist' button for each playlist, represented by a `trash` icon. E.g:\n\n![](img/04.png)\n\nIn addition, the `view` link is replace by a `folder open` icon.\n\nBind the `delete playlist` button to a new function to be implemented in the Dashboard controller, which should log the id of the playlist to be deleted.\n\n## Exercise 2: Delete Playlist Functionality\n\nMake the button actually delete the denoted playlist.\n\nHINT: This is a new function in the `playlist-store` module to delete a playlist, given an ID:\n\n~~~js\nremovePlaylist(id) {\n  _.remove(this.playlistCollection, { id: id });\n},\n~~~\n\nTry to implement the rest of the feature, using the song delete feature as a guide.\n"
    }
  
  ]
  }

